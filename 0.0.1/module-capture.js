(()=>{"use strict";var e={962:function(e,t,n){var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const s=a(n(695));console.log("loaded","@milotheirself/module-capture"),globalThis.ModuleCapture=s},695:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.capture=t.context=void 0;const o=n(891);function r(e){const{target:t,option:n}=o.Capture.choose({params:e});return{preview:e=>{const{render:r}=o.Capture.choose({params:e}),{parsed:a}=o.Capture.parser({target:t,option:n,render:r});return{parsed:a,raster:null,vector:null}},capture:e=>{const{render:r}=o.Capture.choose({params:e}),{parsed:a}=o.Capture.parser({target:t,render:r,option:n}),{raster:s,vector:i}=o.Capture.render({parsed:a,option:n});return{parsed:a,raster:s,vector:i}}}}t.context=r,t.capture=function(e){const{target:t,option:n,render:a}=o.Capture.choose({params:e});return r({target:t,option:n}).capture({render:a})}},891:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Capture=void 0;const r=o(n(308)),a=o(n(794)),s={},i={};s.choose=({params:e})=>{let{target:t,option:n,render:o}=e||{};return t&&(t=i.chooseTarget({target:t})),n&&(n=i.chooseOption({option:n})),o&&(o=i.chooseRender({render:o})),{target:t,option:n,render:o}},i.chooseTarget=({target:e})=>{switch(!0){case null==e:e={node:globalThis.document.body.parentElement,invalid:!1};break;case e&&e.cloneNode instanceof Function:e={node:e,invalid:!1};break;default:e={node:null,invalid:!0}}return e},i.chooseOption=({option:e})=>({capture:Object.assign({dpr:globalThis.devicePixelRatio||1},e&&e.capture?e.capture:{}),resolve:Object.assign({dpr:1},e&&e.resolve?e.resolve:{})}),i.chooseRender=({render:e})=>(e=null!=e?e:{},Array.isArray(e)?e:[e]),t.Capture=Object.assign(Object.assign(Object.assign({},r.default),a.default),s)},308:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(865)),a=o(n(122)),s={parser:({target:e,option:t,render:n})=>{if(e.invalid)return{parsed:null};const o=a.default.replica({target:e,option:t});return{parsed:{bounds:r.default.applied({target:e}).bounds,result:o.result,pledge:o.pledge}}}};t.default=Object.assign({},s)},865:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={},o={translateScroll:()=>{if("scroll"in o&&o.scroll.dpr==globalThis.devicePixelRatio)return;const e=document.createElement("div");e.style.height="100px",e.style.width="100px",e.style.overflow="scroll scroll",document.body.appendChild(e),o.scroll={dpr:globalThis.devicePixelRatio,hei:e.offsetWidth-e.scrollWidth,wid:e.offsetHeight-e.scrollHeight},document.body.removeChild(e)}};o.translateScroll(),globalThis.addEventListener("resize",o.translateScroll),n.applied=({target:e})=>{const t=!(e.node instanceof Element),n=t?{}:e.node.getBoundingClientRect(),r={x:n.x,y:n.y,wid:e.node.offsetWidth||0,hei:e.node.offsetHeight||0},a={x:e.node.scrollLeft,y:e.node.scrollTop,hei:o.scroll.hei,wid:o.scroll.wid};return{offset:t?[0,0,0,0]:[Math.min(0,0-a.y),Math.min(0,0-(e.node.scrollWidth-a.x-e.node.offsetWidth)),Math.min(0,0-(e.node.scrollHeight-a.y-e.node.offsetHeight)),Math.min(0,0-a.x)],styles:t?{}:globalThis.getComputedStyle(e.node),bounds:r,scroll:a}},n.visible=({target:e})=>{const t=e.node.nodeName.toLowerCase();if(-1!=["#comment","style","script"].indexOf(t))return!1;"offsetParent"in e.node&&e.node.offsetParent;const{styles:o}=n.applied({target:e});return!o||"none"!=o.display},n.hastype=({target:e,typ:t})=>-1!=[...t].indexOf(e.node.nodeName.toLowerCase()),t.default=Object.assign({},n)},122:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function s(e){try{l(o.next(e))}catch(e){a(e)}}function i(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(865)),s=r(n(740)),i={},l={};i.replica=({target:e,option:t,pledge:n})=>{if(n=n||[],!a.default.visible({target:e}))return{result:null};const{result:o}=l.imitate({target:e,option:t,pledge:n}),{nested:r,shadow:s}=l.inserts({target:e,option:t,pledge:n}),i=o.node.childNodes[0]||o.node;s.length?(s.forEach((e=>{i.appendChild(e.result.node)})),o.node.querySelectorAll("slot").forEach((e=>{const t=e.getAttribute("name");r.forEach((n=>{t==n.insert&&e.parentNode.insertBefore(n.result.node,e)}))}))):r.forEach((e=>{i.appendChild(e.result.node)}));return{result:o,insert:e.node.getAttribute?e.node.getAttribute("slot"):null,pledge:n}},l.inserts=({target:e,option:t,pledge:n})=>{var o,r,a;const s=({nestedNodes:e})=>[...e&&e.length?e:[]].map((e=>i.replica({target:{node:e},option:t,pledge:n}))).filter((({result:e})=>null!=e));return{nested:s({nestedNodes:null===(o=e.node)||void 0===o?void 0:o.childNodes}),shadow:s({nestedNodes:null===(a=null===(r=e.node)||void 0===r?void 0:r.shadowRoot)||void 0===a?void 0:a.childNodes})}},l.imitate=({target:e,option:t,pledge:n})=>{if(a.default.hastype({target:e,typ:["slot"]}))return{result:{node:e.node.cloneNode(!0),slot:e.node.getAttribute("name")||""}};const o=a.default.hastype({target:e,typ:["svg","img"]})?{node:l.replace({target:e,pledge:n}).result.node,slot:null}:a.default.hastype({target:e,typ:["#text"]})?{node:e.node.cloneNode(!1),slot:null}:a.default.hastype({target:e,typ:["input","fieldset","legend","table","tr","td","th","thead","tbody"]})?{node:document.createElement(e.node.nodeName),slot:null}:{node:document.createElement("div"),slot:null};return l.stylize({target:e,result:o,option:t,pledge:n}),l.offsets({target:e,result:o,option:t,pledge:n}),l.inherit({target:e,result:o,option:t,pledge:n}),{result:o}},l.stylize=({target:e,result:t,option:n,pledge:o})=>{if(!("style"in e.node))return;const r=a.default.applied({target:e}),s=a.default.applied({target:t});Object.values(r.styles).forEach((e=>{let n=r.styles.getPropertyValue(e);0!=e.indexOf("-")&&n!=s.styles.getPropertyValue(e)&&t.node.style.setProperty(e,n)})),"none"!=t.node.style.getPropertyValue("background-image")&&o.push(l.pledge.backgroundImage({target:e,result:t,option:n}))},l.offsets=({target:e,result:t})=>{if(!("style"in e.node))return;const{scroll:n,offset:o,bounds:r}=a.default.applied({target:e});let s=0!=o[3]||0!=o[1],i=0!=o[0]||0!=o[2];if(s||i){t.node.style.setProperty("overflow-x",""+(s?"scroll":"hidden")),t.node.style.setProperty("overflow-y",""+(i?"scroll":"hidden"));const r={node:document.createElement("div"),wid:e.node.offsetWidth-o[3]-(i?n.wid:0),hei:e.node.offsetHeight-o[0]-(s?n.hei:0)};r.node.style.setProperty("margin",`${o.join("px ")}px`),r.node.style.setProperty("width",`${r.wid}px`),r.node.style.setProperty("height",`${r.hei}px`),r.node.style.setProperty("overflow","hidden"),t.node.appendChild(r.node)}},l.replace=({target:e,pledge:t})=>{const n={node:document.createElement("div")};return a.default.hastype({target:e,typ:["svg"]})&&t.push(l.pledge.vectorImage({target:e,result:n})),a.default.hastype({target:e,typ:["img"]})&&t.push(l.pledge.rasterImage({target:e,result:n})),{result:n}},l.inherit=({target:e,result:t})=>{if("style"in e.node){if(a.default.hastype({target:e,typ:["td","th"]})){const n=e.node.getAttribute("rowspan"),o=e.node.getAttribute("colspan");n&&t.node.setAttribute("rowspan",n),o&&t.node.setAttribute("colspan",o)}if(a.default.hastype({target:e,typ:["input"]})){const n=e.node.getAttribute("type");n&&t.node.setAttribute("type",n),e.node.checked&&t.node.setAttribute("checked",""),e.node.value&&t.node.setAttribute("value",e.node.value)}}},l.pledge={},l.pledge.vectorImage=({target:e,result:t})=>new Promise((e=>{e()})),l.pledge.rasterImage=({target:e,result:t})=>new Promise((n=>o(void 0,void 0,void 0,(function*(){const o=yield l.pledge.urlAsUrn({url:e.node.src});t.node.style.setProperty("background-image",`url("${o||"none"}")`),n()})))),l.pledge.backgroundImage=({target:e,result:t})=>new Promise((e=>o(void 0,void 0,void 0,(function*(){const n=t.node.style.getPropertyValue("background-image").slice(5,-2),o=yield l.pledge.urlAsUrn({url:n});t.node.style.setProperty("background-image",`url("${o||"none"}")`),e()})))),l.pledge.urlAsUrn=({url:e})=>new Promise((t=>{const n=new Image;n.onload=()=>o(void 0,void 0,void 0,(function*(){const e=s.default.blank({wid:n.width,hei:n.height,typ:"node"});e.ctx.drawImage(n,0,0,n.width,n.height),t(e.can.toDataURL("image/png"))})),n.onerror=e=>{t()},n.src=e})),t.default=Object.assign({},i)},794:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function s(e){try{l(o.next(e))}catch(e){a(e)}}function i(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(870)),s=r(n(740)),i={},l={};i.render=({parsed:e,option:t})=>{const n=l.parseAsVector({parsed:e});return{parsed:e,raster:l.parseAsRaster({vector:n,option:t}),vector:n}},l.parseAsVector=({parsed:e})=>new Promise((t=>o(void 0,void 0,void 0,(function*(){const n=new Image;n.onload=()=>{n.onload=null,t({wid:n.width,hei:n.height,vec:n})},yield Promise.all(e.pledge);const o=yield e.result,r=(new globalThis.XMLSerializer).serializeToString(o.node);n.src=a.default.svgData({svg:globalThis.encodeURIComponent(`<svg xmlns="http://www.w3.org/2000/svg" \n        width="${e.bounds.wid}" \n        height="${e.bounds.hei}">\n        <foreignObject width="100%" height="100%">${r}</foreignObject>\n      </svg>`)})})))),l.parseAsRaster=({vector:e,option:t})=>new Promise((n=>o(void 0,void 0,void 0,(function*(){const o=yield e,r=s.default.blank({wid:Math.round(o.wid*t.capture.scale),hei:Math.round(o.hei*t.capture.scale)});r.ctx.drawImage(o.vec,0,0,o.wid*t.capture.scale,o.hei*t.capture.scale);const a=t.resolve.scale<=1?r:yield(()=>{const e=s.default.blank({wid:r.wid*Math.ceil(t.resolve.scale),hei:r.hei*Math.ceil(t.resolve.scale)});return s.default.scale({target:e,canvas:r,resize:t.resolve.scale})})();n({wid:a.wid,hei:a.hei,result:a.ctx.getImageData(0,0,a.wid,a.hei).data})})))),t.default=Object.assign({},i)},740:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={blank:({wid:e,hei:t,typ:n})=>{const o="node"!=n&&"OffscreenCanvas"in globalThis?new globalThis.OffscreenCanvas(10,10):document.createElement("canvas"),r=o.getContext("2d");return o.width=e,o.height=t,{can:o,ctx:r,wid:e,hei:t}},pixel:({ctx:e})=>e.getImageData(0,0,e.wid,e.hei),scale:({target:e,canvas:t,resize:o})=>"Worker"in globalThis?new Promise((r=>{const a=`\n      const internal = {};\n      internal.blank = ${n.blank.toString()}\n      internal.scale = ${n.scaleNearestNeighbor.toString()}\n\n      globalThis.onmessage = ((event) => {\n        const canvas = internal.blank({\n          wid: event.data.pixels.width,\n          hei: event.data.pixels.height\n        });\n\n        const resize = event.data.resize;\n        const target = internal.blank({\n          wid: canvas.wid * resize,\n          hei: canvas.hei * resize,\n        });\n\n        canvas.ctx.putImageData(event.data.pixels, 0, 0);\n        globalThis.postMessage({\n          pixels: internal\n            .scale({target, canvas, resize})\n            .ctx.getImageData(0, 0, target.wid, target.hei)\n        });\n      });\n\n      self.postMessage({ });\n    `,s=URL.createObjectURL(new Blob([a])),i=new Worker(s);URL.revokeObjectURL(s),i.onmessage=n=>{if("pixels"in n.data)return e.ctx.putImageData(n.data.pixels,0,0),r(e);i.postMessage({pixels:t.ctx.getImageData(0,0,t.wid,t.hei),resize:o})}})):n.scaleNearestNeighbor({canvas:t,resize:o}),scaleNearestNeighbor:({target:e,canvas:t,resize:n})=>{const o=e.ctx.getImageData(0,0,e.wid,e.hei),r=t.ctx.getImageData(0,0,t.wid,t.hei);let a,s,i,l,d,c,u=4*e.wid,p=u*n,g=4*t.wid,h=4*n;for(let e=0;e<=t.hei;e++){a=e*g,s=e*p;for(let e=0;e<=g;e+=4){i=a+e,l=s+e*n;for(let e=0;e<n;e++){d=e*u;for(let e=0;e<h;e+=4)c=d+l+e,o.data[c]=r.data[i],o.data[c+1]=r.data[i+1],o.data[c+2]=r.data[i+2],o.data[c+3]=r.data[i+3]}}}return e.ctx.putImageData(o,0,0),e}};t.default=Object.assign({},n)},870:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={svgData:({svg:e})=>`data:image/svg+xml,${e}`};t.default=Object.assign({},n)}},t={};(function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports})(962)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";var e={110:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LitNodeBounds=void 0;const l=s(r(704)),a=r(704);r(216),r(667);let d=class extends l.LitElement{constructor(){super(...arguments),this.idle=!globalThis.document.hasFocus(),this.unresolved=(()=>!(this.children[0]&&this.children[0].shadowRoot))(),this.standalone="string"==typeof globalThis.navigator.userAgent&&globalThis.navigator.userAgent.indexOf("Electron")>=0,this.hasTitlebar=(()=>{if(!("windowControlsOverlay"in globalThis.navigator))return!0;const e=()=>{requestAnimationFrame((()=>{this.updateOverlay()}))};return globalThis.navigator.windowControlsOverlay.ongeometrychange=e.bind(this),globalThis.addEventListener("resize",e.bind(this)),globalThis.navigator.windowControlsOverlay.visible})()}render(){return[a.pattern.reference("node-bounds:border").render(this),a.pattern.reference("node-bounds:loader").render(this),a.html`
        <!---->
        <div class="node-bounds inner"><slot></slot></div>
        <!---->
      `]}updateOverlay(){if(!("windowControlsOverlay"in globalThis.navigator))return;const e=globalThis.navigator.windowControlsOverlay,t="getTitlebarAreaRect"in e?e.getTitlebarAreaRect():e.getBoundingClientRect(),r=this.shadowRoot.querySelector(".node-bounds.inner");let n=parseFloat(getComputedStyle(this).getPropertyValue("--node-em"));r.style.setProperty("--node-overlay-inset",`0rem ${t.x/n}rem`),r.style.setProperty("--node-overlay-x",t.x/n+"rem"),r.style.setProperty("--node-overlay-y","0rem"),r.style.setProperty("--node-overlay-hei",t.height/n+"rem"),r.style.setProperty("--node-overlay-hei-ent",""+(0!=t.x?1:0)),r.style.setProperty("--node-overlay-hei-out",""+(0==t.x?1:0)),r.style.setProperty("--node-overlay-wid",t.width/n+"rem"),r.style.setProperty("--node-overlay-wid-hid",(0!=t.width?(this.scrollWidth-t.width)/n:0)+"rem"),r.style.setProperty("--node-overlay-wid-ent",""+(0!=t.x?1:0)),r.style.setProperty("--node-overlay-wid-out",""+(0==t.x?1:0)),this.hasTitlebar=e.visible,this.requestUpdate()}firstUpdated(){const e=()=>{this.idle=!globalThis.document.hasFocus(),this.requestUpdate()};globalThis.addEventListener("focus",e.bind(this),{passive:!0}),globalThis.addEventListener("blur",e.bind(this),{passive:!0}),e(),this.children[0]?(customElements.whenDefined(this.children[0].localName).then((()=>{this.unresolved=!1,this.requestUpdate()})),this.updateOverlay()):console.error("err","missing bounds children")}updated(){this.idle?this.setAttribute("node-idle",""):this.removeAttribute("node-idle"),this.unresolved?this.setAttribute("node-unresolved",""):this.removeAttribute("node-unresolved"),this.standalone?this.setAttribute("node-standalone",""):this.removeAttribute("node-standalone")}};d.styles=[a.pattern.reference("node-common").styles(),a.pattern.reference("node-bounds:border").styles(),a.pattern.reference("node-bounds:loader").styles(),a.css`
      :host {
        position: fixed;
        inset: 0rem 0rem;

        display: flex;
        flex-direction: column;
        flex: none;

        background: var(--tone-backdrop);
      }

      .node-bounds.inner {
        position: relative;

        display: flex;
        flex-direction: column;
        flex: auto;
      }
    `],o([l.property({attribute:!1})],d.prototype,"idle",void 0),o([l.property({attribute:!1})],d.prototype,"unresolved",void 0),o([l.property({attribute:!1})],d.prototype,"standalone",void 0),o([l.property({attribute:!1})],d.prototype,"hasTitlebar",void 0),d=o([l.customElement("node-bounds")],d),t.LitNodeBounds=d},216:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-bounds:border").create({styles:(e,t)=>n.css`
    /**/
    :host([node-standalone]) {
      border-radius: var(--tone-border-corner);
      overflow: hidden;

      border: var(--node-border-scrim);
      border-radius: var(--tone-border-corner);
    }

    /**/
    .host-node.bounds-border-drag {
      display: flex;
      flex-direction: row;
      flex: none;

      z-index: 40;
      height: var(--node-gutter);
      margin: 0rem 0rem calc(0rem - var(--node-gutter)) 0rem;

      pointer-events: all;
      -webkit-app-region: drag;
    }

    /**/
    .host-node.bounds-border {
      display: flex;
      flex-direction: row;
      flex: none;

      z-index: 40;
      height: 2rem;

      pointer-events: all;
      padding: 0rem var(--node-margin-sm);
      -webkit-app-region: drag;
    }

    :host([node-idle]) .host-node.bounds-border {
      opacity: 0.54;
    }

    .host-node.bounds-border > .bounds-border-inner {
      display: flex;
      flex-direction: row;
      flex: none;

      align-items: center;
    }
  `,render:(e,t)=>n.html`
    <div class="host-node bounds-border-drag" ?inert="${!e.hasTitlebar}" ?node-hidden="${!e.hasTitlebar}">
      <!---->
      <!---->
    </div>

    <div class="host-node bounds-border" ?inert="${!e.standalone}" ?node-hidden="${!e.standalone}">
      <!---->
      <div class="bounds-border-inner">
        <!---->
        <span class="node-type tag-sm">${document.title}</span>
        <!---->
      </div>
      <!---->

      <!---->
      <div class="grid-node flex"></div>
      <div class="bounds-border-inner">
        <!---->
        <!---->
      </div>
      <!---->
    </div>
  `})},667:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-bounds:loader").create({styles:(e,t)=>n.css`
    .host-node.bounds-loader {
      z-index: 40;
      position: fixed;
      inset: 0rem 0rem;

      display: flex;
      flex-direction: column;
      flex: auto;

      align-items: center;
      justify-content: center;
    }
  `,render:(e,t)=>n.html`
    <!---->
    <div class="host-node bounds-loader" ?inert="${!e.unresolved}" ?node-hidden="${!e.unresolved}">
      <!---->
      <node-loader node-active="true"></node-loader>
      <!---->
    </div>
    <!---->
  `})},182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);r(889),r(394),r(174),r(527),r(192),n.pattern.reference("node-common").create({styles:(e,t)=>[n.css`
      /**/
      :host {
        /**/
        --node-dp: 1px;
        --node-em: 16px;

        /**/
        font-size: var(--node-em);
      }

      /**/
      :host,
      :host * {
        box-sizing: border-box;
      }

      /**/
      [inert] {
        pointer-events: none;
        cursor: default;
      }

      [inert],
      [inert] * {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
      }

      /**/
      [node-hidden] {
        position: absolute;
        inset: 0rem 0rem;
        box-sizing: border-box;

        clip: rect(0 0 0 0);
        clip-path: inset(50%);

        width: 2rem;
        height: 2rem;
        margin: -1rem;

        overflow: hidden;
        white-space: nowrap;
      }
    `,n.pattern.reference("node-common:node-action").styles(),n.pattern.reference("node-common:node-grid").styles(),n.pattern.reference("node-common:tone").styles(),n.pattern.reference("node-common:type").styles(),n.pattern.reference("node-common:type-icon").styles()]})},44:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LitNodeLoader=void 0;const l=s(r(704)),a=r(704);let d=class extends l.LitElement{constructor(){super(...arguments),this.active=!1}render(){return[a.html`
        <!---->
        <svg class="host-node spinner" viewbox="0 0 32 32">
          <circle class="spinner-circle" cx="16" cy="16" r="15" fill="none"></circle>
          <circle class="spinner-circle role-twin" cx="16" cy="16" r="15" fill="none"></circle>
        </svg>
        <!---->
      `]}};d.styles=[a.pattern.reference("node-common").styles(),a.css`
      /**/
      :host {
        display: flex;
        flex-direction: column;
        flex: none;

        justify-content: center;
        align-items: center;
        flex: none;

        height: 2rem;
        width: 2rem;

        overflow: hidden;

        opacity: 0;
        transition: opacity 100ms 0ms cubic-bezier(0, 0, 0.2, 1);
      }
      :host([node-active='true']) {
        opacity: 1;
        transition: opacity 100ms 200ms cubic-bezier(0, 0, 0.2, 1);
      }

      /**/
      .host-node.spinner {
        box-siting: border-box;
        height: 1rem;
        width: 1rem;
        border-radius: 50%;
        margin: 0 auto;
        pointer-events: none;
      }
      .host-node.spinner > .spinner-circle {
        box-siting: border-box;
        stroke-width: 0.1875rem;
        transform-origin: 50%;
      }
      .host-node.spinner > .spinner-circle:not(.role-twin) {
        stroke: var(--tone-primer);
        -webkit-animation: progress-spinner-animation-line 6200ms linear infinite, progress-spinner-animation-rotate 6200ms linear infinite;
        animation: progress-spinner-animation-line 6200ms linear infinite, progress-spinner-animation-rotate 6200ms linear infinite;
        animation-delay: -1000ms;
      }
      .host-node.spinner > .spinner-circle.role-twin {
        stroke: var(--tone-primer);
        -webkit-animation: progress-spinner-animation-line 6200ms linear infinite, progress-spinner-animation-rotate-twin 6200ms linear infinite;
        animation: progress-spinner-animation-line 6200ms linear infinite, progress-spinner-animation-rotate-twin 6200ms linear infinite;
        animation-delay: -1000ms;
      }

      /**/
      @-webkit-keyframes progress-spinner-animation-rotate {
        0% {
          transform: rotate(180deg);
        }
        90% {
          transform: rotate(2700deg);
        }
        100% {
          transform: rotate(2700deg);
        }
      }
      @-webkit-keyframes progress-spinner-animation-rotate-twin {
        0% {
          transform: rotate(0deg);
        }
        90% {
          transform: rotate(2520deg);
        }
        100% {
          transform: rotate(2520deg);
        }
      }
      @-webkit-keyframes progress-spinner-animation-line {
        0% {
          stroke-dasharray: 47, 1000;
          stroke-dashoffset: 0;
        }
        5% {
          stroke-dasharray: 47, 1000;
          stroke-dashoffset: 0;
        }
        10% {
          stroke-dasharray: 14, 1000;
          stroke-dashoffset: -13;
        }
        80% {
          stroke-dasharray: 14, 1000;
          stroke-dashoffset: -13;
        }
        85% {
          stroke-dasharray: 47, 1000;
          stroke-dashoffset: 0;
        }
        100% {
          stroke-dasharray: 47, 1000;
          stroke-dashoffset: 0;
        }
      }
    `],o([l.property({reflect:!0,attribute:"node-active"})],d.prototype,"active",void 0),d=o([l.customElement("node-loader")],d),t.LitNodeLoader=d},889:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-common:node-action").create({styles:(e,t)=>[n.css`
      /**/
      .wireframe-node.action {
        position: relative;

        display: flex;
        flex-direction: row;
        align-items: center;
        flex: none;

        height: 1.875rem;
        padding: 0rem var(--node-gutter);
        overflow: hidden;

        cursor: pointer;
        border: 0rem solid;
        border-radius: var(--tone-border-corner);
        background: transparent;

        transition: background var(--timing-wait) 0ms var(--timing-func);
        user-select: none;

        overflow: hidden;
      }
      .wireframe-node.action:focus-visible {
        background: var(--tone-backdrop-dim);
        transition: background var(--timing-wait) var(--timing-wait) var(--timing-func);
      }
      .wireframe-node.action:active {
        background: var(--tone-backdrop-drk);
        transition: background var(--timing-wait) 0ms var(--timing-func);
      }
      .wireframe-node.action > button,
      .wireframe-node.action > input {
        position: absolute;
        inset: 0rem 0rem 0rem 0rem;

        margin: 0rem 0rem;
        padding: 0rem 0rem;

        opacity: 0;
        border: none;
        pointer-events: none;
      }
    `]})},394:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-common:node-grid").create({styles:(e,t)=>[n.css`
      :host {
        /**/
        --node-margin: 1.25rem;
        --node-margin-sm: 0.75rem;

        --node-gutter: 0.625rem;
        --node-gutter-sm: 0.3125rem;

        /**/
        --node-dp: calc(1rem / 16);

        /**/
        --node-ratio: calc(11 / 8.5);
        --node-ratio-frame: calc(3 / 5);

        /**/
        --node-border: var(--node-dp);
        --node-border-solid: var(--node-border) solid var(--tone-border);
        --node-border-scrim: var(--node-border) solid var(--tone-scrim-drk);
      }

      /**/
      .grid-node.flex {
        flex: 1;
      }

      /**/
      .grid-node.flex-row {
        display: flex;
        flex-direction: column;
      }
      .grid-node.flex-column {
        display: flex;
        flex-direction: column;
      }

      /**/
      .grid-node.align-center,
      .grid-node.align-center-center {
        align-items: center;
      }
      .grid-node.align-center-center {
        justify-content: center;
      }
    `,n.css`
      /**/
      .grid-node.wireframe-row {
        display: flex;
        flex-direction: row;
        flex: none;
        justify-content: space-between;
      }

      .grid-node.wireframe-row > .wireframe-row-inner {
        display: flex;
        flex-direction: row;
        flex: none;
        align-items: center;

        height: 1.875rem;
      }
    `]})},174:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-common:tone").create({styles:(e,t)=>n.css`
    :host {
      /**
       * 
       */

      /* emphasize tone */
      --tone-accent: var(--palette-blue);
      --tone-accent-lit: var(--palette-blue-lit);
      --tone-accent-dim: var(--palette-blue-dim);

      /* fallback tone */
      --tone-primer: #606568;
      --tone-primer-lit: #d6d6d6;
      --tone-primer-dim: #686d6f;

      /**
       * 
       */

      /**/
      --tone-border: #e0e0e0;
      --tone-border-corner: 0.625rem;
      --tone-border-radius: 1.25rem;

      /**
       * 
       */

      /**/
      --tone-type: #23282e;
      --tone-type-lit: #909090;
      --tone-type-dim: #797979;
      --tone-type-drk: #24292f;

      /**/
      --tone-scrim: rgba(0, 0, 0, 0);
      --tone-scrim-lit: rgba(0, 0, 0, 0.06);
      --tone-scrim-dim: rgba(0, 0, 0, 0.12);
      --tone-scrim-drk: rgba(102, 102, 102, 0.4);

      /**/
      --tone-backdrop: #f6f6f6;
      --tone-backdrop-lit: #fcfcfc;
      --tone-backdrop-dim: #efefef;
      --tone-backdrop-drk: #eaeaea;

      /**
       * 
       */

      /**/
      --timing-show: 240ms;
      --timing-hide: 200ms;
      --timing-wait: 80ms;

      /**/
      --timing-func: cubic-bezier(0.4, 0, 0.2, 1);
      --timing-func-ent: cubic-bezier(0, 0, 0.2, 1);
      --timing-func-out: cubic-bezier(0.4, 0, 1, 1);

      /**
       * 
       */

      /**/
      --palette-gray: #606568;
      --palette-gray-lit: #d6d7d9;
      --palette-gray-dim: #606568;

      /**/
      --palette-copper: #e35d49;
      --palette-copper-lit: #f2c3c3;
      --palette-copper-dim: #e65454;

      /**/
      --palette-orange: #f4a425;
      --palette-orange-lit: #f7d8a6;
      --palette-orange-dim: #ff8d0a;

      /**/
      --palette-yellow: #ffc107;
      --palette-yellow-lit: #fadca9;
      --palette-yellow-dim: #ffa810;

      /**/
      --palette-green: #96ce1f;
      --palette-green-lit: #c8e1b5;
      --palette-green-dim: #64b125;

      /**/
      --palette-blue: #3ca1ff;
      --palette-blue-lit: #bbdaf6;
      --palette-blue-dim: #2997ff;

      /**/
      --palette-teal: #24c180;
      --palette-teal-lit: #c4ebdc;
      --palette-teal-dim: #24c180;

      /**/
      --palette-indigo: #3f58b5;
      --palette-indigo-lit: #dbe3ff;
      --palette-indigo-dim: #3f58b5;

      /**/
      --palette-purple: #8c56e6;
      --palette-purple-lit: #e6dafa;
      --palette-purple-dim: #8c56e6;
    }
  `})},192:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704),i={};i.icons={document:n.svg`
    <g style="fill:none;stroke:none;"><rect width="96" height="96" cx="48" cy="48"/></g>    
    <g style="fill:none;stroke:currentColor;stroke-width:6;stroke-linecap:round;">
      <path d="M70,79H26c-2.21,0-4-1.79-4-4V21c0-2.21,1.79-4,4-4h44c2.21,0,4,1.79,4,4v54C74,77.21,72.21,79,70,79z"/>
      <line x1="36" y1="39" x2="60" y2="39"/>
      <line x1="36" y1="57" x2="60" y2="57"/>
    </g>
  `,search:n.svg`
    <g style="fill:none;stroke:none;"><rect width="96" height="96" cx="48" cy="48"/></g>    
    <g style="fill:none;stroke:currentColor;stroke-width:6;stroke-linecap:round;">
      <circle cx="43" cy="43" r="26"/>
      <line x1="61.44" y1="61.44" x2="78.41" y2="78.41"/>
    </g>
  `,navigate:n.svg`
    <g style="fill:none;stroke:none;"><rect width="96" height="96" cx="48" cy="48"/></g>
    <g style="fill:none;stroke:currentColor;stroke-width:6;stroke-linecap:round;">
      <line x1="20" y1="48" x2="76" y2="48"/>
      <line x1="20" y1="22" x2="76" y2="22"/>
      <line x1="20" y1="74" x2="76" y2="74"/>
    </g>
  `,navigate_back:n.svg`
    <g style="fill:none;stroke:none;"><rect width="96" height="96" cx="48" cy="48"/></g>    
    <g style="fill:none;stroke:currentColor;stroke-width:6;stroke-linecap:round;stroke-linejoin:round;">
      <path d="M62.91,78L35.03,50.12c-1.17-1.17-1.17-3.07,0-4.24L62.91,18"/>
    </g>
  `,more_options:n.svg`
    <g style="fill:none;stroke:none;"><rect width="96" height="96" cx="48" cy="48"/></g>    
    <g style="fill:currentColor;stroke:none;">
      <circle cx="48" cy="25" r="6"/>
      <circle cx="48" cy="48" r="6"/>
      <circle cx="48" cy="71" r="6"/>
    </g>
  `},n.pattern.reference("node-common:type-icon").create({styles:(e,t)=>n.css`
    /**/
    .node-type-icon {
      position: relative;
      display: inline;
      flex: none;
      font-size: var(--font-size);
      color: var(--typo-scheme-figure);
      fill: currentColor;
      stroke: currentColor;
      overflow: hidden;
    }
    .node-type-icon > svg {
      display: block;
      height: 1.625em;
      width: 1.625em;
      margin: 0.0625px;
      pointer-events: none;
    }
  `,render:(e,t)=>n.html`
    <span class="node-type-icon"
      ><svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        x="0px"
        y="0px"
        viewBox="0 0 96 96"
        style="enable-background:new 0 0 96 96;"
        xml:space="preserve"
      >
        ${i.icons[t.nonce]}
      </svg></span
    >
  `})},527:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(704);n.pattern.reference("node-common:type").create({styles:(e,t)=>n.css`
    /**/
    .node-type {
      --font-size: calc(16px * var(--node-scaling));
      --font-family: 'Inter', 'Roboto', sans-serif;
      --font-family-code: monospace;
    }

    /**/
    .node-type {
      font-family: var(--font-family);
      font-size: var(--font-size);

      text-rendering: optimizeLegibility;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    /**/
    .node-type a {
      font-weight: 500;
      text-decoration: none;
      color: var(--tone-accent);
      border-bottom: var(--tone-accent) solid 1px;

      cursor: pointer;
    }
    .node-type a:not(:hover) {
      border-bottom: transparent solid 1px;
    }

    /**/
    .node-type b {
      font-weight: 500;
    }

    /**/

    .node-type.body,
    .node-type.body-sm {
      font-size: 1.0625rem;
      font-weight: 400;
      letter-spacing: 0.003rem;

      color: var(--tone-type-drk);
    }
    .node-type.body-sm {
      font-size: 0.969rem;
      letter-spacing: 0.003rem;
    }

    /* */
    .node-type.code {
      font-family: var(--font-family-code);

      font-size: 0.8125rem;
      font-weight: 400;
      letter-spacing: 0.003rem;
      line-height: 1.25rem;
      color: var(--tone-type-drk);
    }

    /* */
    .node-type.title {
      font-size: 1.625rem;
      font-weight: 700;
      letter-spacing: 0.003rem;
      color: var(--tone-type-drk);
    }
    .node-type.title-lg {
      font-size: 2rem;
      font-weight: 300;
      letter-spacing: 0.003rem;
      color: var(--tone-type-drk);
    }

    /* */
    .node-type.heading {
      font-size: 1.2rem;
      font-weight: 400;
      color: var(--tone-type-drk);
    }
    .node-type.heading-sm {
      font-size: 0.85rem;
      font-weight: 500;
      line-height: 1.25rem;
      letter-spacing: 0.003rem;

      color: var(--tone-type-drk);
    }

    /* */

    /* */
    .node-type.description,
    .node-type.description-sm,
    .node-type.description-xs {
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.25rem;
      letter-spacing: 0.003rem;

      color: var(--tone-type-lit);
    }
    .node-type.description-sm {
      font-size: 0.8125rem;
      font-weight: 400;
    }
    .node-type.description-xs {
      font-size: 0.75rem;
      font-weight: 400;
    }

    /* */
    .node-type.action,
    .node-type.action-sm {
      font-size: 0.88889rem;
      letter-spacing: 0.003rem;
      line-height: 1.25rem;
      font-weight: 400;

      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;

      color: var(--tone-type-drk);
    }
    .node-type.action-sm {
      font-size: 0.75rem;
      letter-spacing: 0.003rem;
    }

    /* */
    .node-type.navigation {
      font-size: 1.0625rem;
      letter-spacing: 0.003rem;
      line-height: 1.25rem;
      font-weight: 400;

      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;

      color: var(--tone-type-drk);
    }
    .node-type.navigation.sm {
      font-size: 0.85rem;
      letter-spacing: 0.003rem;
    }
    [data-disabled] .node-type.navigation {
      color: var(--tone-type-drk);
    }

    /**/
    .node-type.tag-sm {
      font-size: 0.8rem;
      letter-spacing: 0.003rem;
      line-height: 2rem;
      font-weight: 400;
      color: var(--tone-type-drk);
    }
  `})},704:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.storage=t.pattern=void 0,i(r(225),t),i(r(847),t),i(r(868),t);var s=r(560);Object.defineProperty(t,"pattern",{enumerable:!0,get:function(){return o(s).default}});var l=r(49);Object.defineProperty(t,"storage",{enumerable:!0,get:function(){return o(l).default}})},490:function(e,t){var r,n,i=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){r.set(this,{}),n.set(this,{})}once(e,t){let r=()=>{this.detach(e,r),t(...arguments)};this.on(e,r)}on(e,t){i(this,r,"f")[e]||(i(this,r,"f")[e]=[]),i(this,r,"f")[e].push(t)}detach(e,t){let n;"object"==typeof i(this,r,"f")[e]&&(n=i(this,r,"f")[e].indexOf(t),n>-1&&i(this,r,"f")[e].splice(n,1))}dispatch(e){let t,n,o,s=[].slice.call(arguments,1);if("object"==typeof i(this,r,"f")[e])for(n=i(this,r,"f")[e].slice(),o=n.length,t=0;t<o;t++)n[t].apply(this,s)}action(e){if(i(this,n,"f")[e])return i(this,n,"f")[e](...[].slice.call(arguments,1));console.warn(`Unregistert action call "${e}"`)}catch(e,t){i(this,n,"f")[e]=t}},r=new WeakMap,n=new WeakMap},278:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r={},n={};n.epoch=new Date("2020-01-01").getTime(),n.worker=0,n.process=0,n.increment=0,n.binaryString=(e,t)=>e.toString(2).padStart(t,"0"),n.binaryToID=e=>{let t="";for(;e.length>50;){const r=parseInt(e.slice(0,-32),2),n=parseInt((r%10).toString(2)+e.slice(-32),2);t=(n%10).toString()+t,e=Math.floor(r/10).toString(2)+Math.floor(n/10).toString(2).padStart(32,"0")}let r=parseInt(e,2);for(;r>0;)t=(r%10).toString()+t,r=Math.floor(r/10);return t},n.idToBinary=e=>{let t="",r=parseInt(e.slice(0,-10))||0,n=parseInt(e.slice(-10));for(;n>0||r>0;)t=String(1&n)+t,n=Math.floor(n/2),r>0&&(n+=r%2*5e9,r=Math.floor(r/2));return t},r.create=(e,t)=>{e=null!=e?e:Date.now(),t=null!=t?t:n.increment++,n.increment>=4095&&(n.increment=0);let r="";return r+=`${n.binaryString(e-n.epoch,42)}`,r+=`${n.binaryString(n.process,5)}`,r+=`${n.binaryString(n.worker,5)}`,r+=`${n.binaryString(t,12)}`,n.binaryToID(r)},r.read=e=>{const t=n.idToBinary(e).toString(2).padStart(64,"0");return{epoch:n.epoch,timestamp:parseInt(t.substring(0,42),2)+n.epoch,worker:parseInt(t.substring(42,47),2),process:parseInt(t.substring(47,52),2),increment:parseInt(t.substring(52,64),2),binary:t}},t.default=Object.assign({},r)},560:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(225),o=n(r(49)),s={},l={},a=globalThis.nodeExternal;"node-pattern"in a?l.reference=a["node-pattern"]:(l.reference=o.default.create(),a["node-pattern"]=a["node-pattern"]||{collection:l.reference.collection.bind(l.reference),doc:l.reference.doc.bind(l.reference)}),s.reference=e=>{const t=l.reference.doc("node.pattern").get({sync:!0});return e in t?t[e]:(()=>{const t={};return t[e]={render:(t,r)=>i.html` <!-- err; pattern '${e}' not defind --> `,styles:(t,r)=>i.css`
              /* err; pattern '${(0,i.unsafeCSS)(e)}' not defind */
            `,create:({render:r,styles:n})=>{const i=l.reference.doc("node.pattern").get({sync:!0});i[e]={},i[e].styles=null!=n?n:t[e].create,i[e].render=null!=r?r:t[e].create,i[e].create=t[e].create,l.reference.doc("node.pattern").set(i,{merge:!0})}},l.reference.doc("node.pattern").set(t,{merge:!0}),t[e]})()},t.default=Object.assign({},s)},49:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(447)),o={};globalThis.nodeExternal;o.create=()=>new i.default,t.default=Object.assign({},o)},761:function(e,t,r){var n,i=this&&this.__classPrivateFieldSet||function(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r},o=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=s(r(278));t.default=class{constructor(e){n.set(this,void 0),i(this,n,e||{},"f"),this.nonce=l.default.create()}doc(e){return o(this,n,"f").doc(e,this.nonce)}},n=new WeakMap},593:function(e,t,r){var n,i,o=this&&this.__classPrivateFieldSet||function(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r},s=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(r(490)),d={assign:(...e)=>{let t={},r=e=>{for(let r in e){if(!e.hasOwnProperty(r))return;"[object Object]"===Object.prototype.toString.call(e[r])?t[r]=d.assign(t[r],e[r]):t[r]=e[r]}};for(let t=0;t<e.length;t++)r(e[t]);return t},equals:(e,t)=>{const r=e=>{let t=Object.keys(e);t.sort();let r={};for(let n=0;n<t.length;n++){let i=t[n],o=e[i];r[i]=o}return r};return JSON.stringify(r(e))==JSON.stringify(r(t))}};t.default=class{constructor(){n.set(this,void 0),i.set(this,void 0),o(this,n,new a.default,"f"),o(this,i,{},"f")}onSnapshot(e,t){s(this,n,"f").on("changed",(()=>{e(this.get(t))}))}get(e){return(e=e||{}).sync?Object.assign({},s(this,i,"f")):new Promise((e=>{e({exists:!!Object.keys(s(this,i,"f")).length,data:()=>Object.assign({},s(this,i,"f"))})}))}set(e,t){const r=(t=t||{}).merge?Object.assign({},s(this,i,"f")):{},l=d.assign(r,e),a=!d.equals(r,l);return o(this,i,l,"f"),s(this,n,"f").dispatch("changed"),a}},n=new WeakMap,i=new WeakMap},447:function(e,t,r){var n,i,o=this&&this.__classPrivateFieldSet||function(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r},s=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(r(278)),d=l(r(490)),c=l(r(761)),h=l(r(593));class u extends d.default{constructor(){super(),n.set(this,{}),i.set(this,{}),o(this,n,{},"f"),o(this,i,{},"f"),this.nonce=a.default.create()}collection(e,t){return t||(t=this.nonce),s(this,n,"f")[e]?s(this,n,"f")[e]:s(this,n,"f")[e]?void 0:(s(this,n,"f")[e]=new c.default(this),s(this,n,"f")[e])}doc(e,t){if(t||(t=this.nonce),-1!=e.indexOf("/")){let t;return e.split("/").forEach(((e,r)=>{t=r%2==0?this.collection(e):this.doc(e)})),t}return s(this,i,"f")[e]?s(this,i,"f")[e]:s(this,i,"f")[e]?void 0:(s(this,i,"f")[e]=new h.default,s(this,i,"f")[e])}}t.default=u,n=new WeakMap,i=new WeakMap},526:(e,t,r)=>{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var n;r.d(t,{Al:()=>D,dy:()=>$,Jb:()=>A,Ld:()=>E,sY:()=>k,YP:()=>x});const i=globalThis.trustedTypes,o=i?i.createPolicy("lit-html",{createHTML:e=>e}):void 0,s=`lit$${(Math.random()+"").slice(9)}$`,l="?"+s,a=`<${l}>`,d=document,c=(e="")=>d.createComment(e),h=e=>null===e||"object"!=typeof e&&"function"!=typeof e,u=Array.isArray,p=e=>{var t;return u(e)||"function"==typeof(null===(t=e)||void 0===t?void 0:t[Symbol.iterator])},f=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,m=/-->/g,v=/>/g,y=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,g=/'/g,b=/"/g,_=/^(?:script|style|textarea)$/i,w=e=>(t,...r)=>({_$litType$:e,strings:t,values:r}),$=w(1),x=w(2),A=Symbol.for("lit-noChange"),E=Symbol.for("lit-nothing"),S=new WeakMap,k=(e,t,r)=>{var n,i;const o=null!==(n=null==r?void 0:r.renderBefore)&&void 0!==n?n:t;let s=o._$litPart$;if(void 0===s){const e=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:null;o._$litPart$=s=new M(t.insertBefore(c(),e),e,void 0,null!=r?r:{})}return s._$AI(e),s},P=d.createTreeWalker(d,129,null,!1),O=(e,t)=>{const r=e.length-1,n=[];let i,l=2===t?"<svg>":"",d=f;for(let t=0;t<r;t++){const r=e[t];let o,c,h=-1,u=0;for(;u<r.length&&(d.lastIndex=u,c=d.exec(r),null!==c);)u=d.lastIndex,d===f?"!--"===c[1]?d=m:void 0!==c[1]?d=v:void 0!==c[2]?(_.test(c[2])&&(i=RegExp("</"+c[2],"g")),d=y):void 0!==c[3]&&(d=y):d===y?">"===c[0]?(d=null!=i?i:f,h=-1):void 0===c[1]?h=-2:(h=d.lastIndex-c[2].length,o=c[1],d=void 0===c[3]?y:'"'===c[3]?b:g):d===b||d===g?d=y:d===m||d===v?d=f:(d=y,i=void 0);const p=d===y&&e[t+1].startsWith("/>")?" ":"";l+=d===f?r+a:h>=0?(n.push(o),r.slice(0,h)+"$lit$"+r.slice(h)+s+p):r+s+(-2===h?(n.push(void 0),t):p)}const c=l+(e[r]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==o?o.createHTML(c):c,n]};class T{constructor({strings:e,_$litType$:t},r){let n;this.parts=[];let o=0,a=0;const d=e.length-1,h=this.parts,[u,p]=O(e,t);if(this.el=T.createElement(u,r),P.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(n=P.nextNode())&&h.length<d;){if(1===n.nodeType){if(n.hasAttributes()){const e=[];for(const t of n.getAttributeNames())if(t.endsWith("$lit$")||t.startsWith(s)){const r=p[a++];if(e.push(t),void 0!==r){const e=n.getAttribute(r.toLowerCase()+"$lit$").split(s),t=/([.?@])?(.*)/.exec(r);h.push({type:1,index:o,name:t[2],strings:e,ctor:"."===t[1]?U:"?"===t[1]?N:"@"===t[1]?H:z})}else h.push({type:6,index:o})}for(const t of e)n.removeAttribute(t)}if(_.test(n.tagName)){const e=n.textContent.split(s),t=e.length-1;if(t>0){n.textContent=i?i.emptyScript:"";for(let r=0;r<t;r++)n.append(e[r],c()),P.nextNode(),h.push({type:2,index:++o});n.append(e[t],c())}}}else if(8===n.nodeType)if(n.data===l)h.push({type:2,index:o});else{let e=-1;for(;-1!==(e=n.data.indexOf(s,e+1));)h.push({type:7,index:o}),e+=s.length-1}o++}}static createElement(e,t){const r=d.createElement("template");return r.innerHTML=e,r}}function C(e,t,r=e,n){var i,o,s,l;if(t===A)return t;let a=void 0!==n?null===(i=r._$Cl)||void 0===i?void 0:i[n]:r._$Cu;const d=h(t)?void 0:t._$litDirective$;return(null==a?void 0:a.constructor)!==d&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===d?a=void 0:(a=new d(e),a._$AT(e,r,n)),void 0!==n?(null!==(s=(l=r)._$Cl)&&void 0!==s?s:l._$Cl=[])[n]=a:r._$Cu=a),void 0!==a&&(t=C(e,a._$AS(e,t.values),a,n)),t}class j{constructor(e,t){this.v=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(e){var t;const{el:{content:r},parts:n}=this._$AD,i=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:d).importNode(r,!0);P.currentNode=i;let o=P.nextNode(),s=0,l=0,a=n[0];for(;void 0!==a;){if(s===a.index){let t;2===a.type?t=new M(o,o.nextSibling,this,e):1===a.type?t=new a.ctor(o,a.name,a.strings,this,e):6===a.type&&(t=new L(o,this,e)),this.v.push(t),a=n[++l]}s!==(null==a?void 0:a.index)&&(o=P.nextNode(),s++)}return i}m(e){let t=0;for(const r of this.v)void 0!==r&&(void 0!==r.strings?(r._$AI(e,r,t),t+=r.strings.length-2):r._$AI(e[t])),t++}}class M{constructor(e,t,r,n){var i;this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=r,this.options=n,this._$Cg=null===(i=null==n?void 0:n.isConnected)||void 0===i||i}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cg}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=C(this,e,t),h(e)?e===E||null==e||""===e?(this._$AH!==E&&this._$AR(),this._$AH=E):e!==this._$AH&&e!==A&&this.$(e):void 0!==e._$litType$?this.T(e):void 0!==e.nodeType?this.S(e):p(e)?this.A(e):this.$(e)}M(e,t=this._$AB){return this._$AA.parentNode.insertBefore(e,t)}S(e){this._$AH!==e&&(this._$AR(),this._$AH=this.M(e))}$(e){this._$AH!==E&&h(this._$AH)?this._$AA.nextSibling.data=e:this.S(d.createTextNode(e)),this._$AH=e}T(e){var t;const{values:r,_$litType$:n}=e,i="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=T.createElement(n.h,this.options)),n);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===i)this._$AH.m(r);else{const e=new j(i,this),t=e.p(this.options);e.m(r),this.S(t),this._$AH=e}}_$AC(e){let t=S.get(e.strings);return void 0===t&&S.set(e.strings,t=new T(e)),t}A(e){u(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let r,n=0;for(const i of e)n===t.length?t.push(r=new M(this.M(c()),this.M(c()),this,this.options)):r=t[n],r._$AI(i),n++;n<t.length&&(this._$AR(r&&r._$AB.nextSibling,n),t.length=n)}_$AR(e=this._$AA.nextSibling,t){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cg=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class z{constructor(e,t,r,n,i){this.type=1,this._$AH=E,this._$AN=void 0,this.element=e,this.name=t,this._$AM=n,this.options=i,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=E}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,r,n){const i=this.strings;let o=!1;if(void 0===i)e=C(this,e,t,0),o=!h(e)||e!==this._$AH&&e!==A,o&&(this._$AH=e);else{const n=e;let s,l;for(e=i[0],s=0;s<i.length-1;s++)l=C(this,n[r+s],t,s),l===A&&(l=this._$AH[s]),o||(o=!h(l)||l!==this._$AH[s]),l===E?e=E:e!==E&&(e+=(null!=l?l:"")+i[s+1]),this._$AH[s]=l}o&&!n&&this.k(e)}k(e){e===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class U extends z{constructor(){super(...arguments),this.type=3}k(e){this.element[this.name]=e===E?void 0:e}}const R=i?i.emptyScript:"";class N extends z{constructor(){super(...arguments),this.type=4}k(e){e&&e!==E?this.element.setAttribute(this.name,R):this.element.removeAttribute(this.name)}}class H extends z{constructor(e,t,r,n,i){super(e,t,r,n,i),this.type=5}_$AI(e,t=this){var r;if((e=null!==(r=C(this,e,t,0))&&void 0!==r?r:E)===A)return;const n=this._$AH,i=e===E&&n!==E||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,o=e!==E&&(n===E||i);i&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==r?r:this.element,e):this._$AH.handleEvent(e)}}class L{constructor(e,t,r){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(e){C(this,e)}}const D={P:"$lit$",V:s,L:l,I:1,N:O,R:j,D:p,j:C,H:M,O:z,F:N,B:H,W:U,Z:L},I=window.litHtmlPolyfillSupport;null==I||I(T,M),(null!==(n=globalThis.litHtmlVersions)&&void 0!==n?n:globalThis.litHtmlVersions=[]).push("2.1.1")},847:(e,t,r)=>{r.r(t),r.d(t,{customElement:()=>n,eventOptions:()=>a,property:()=>o,query:()=>d,queryAll:()=>c,queryAssignedElements:()=>f,queryAssignedNodes:()=>m,queryAsync:()=>h,state:()=>s});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const n=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:r,elements:n}=t;return{kind:r,elements:n,finisher(t){window.customElements.define(e,t)}}})(e,t),i=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(r){r.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(r){r.createProperty(t.key,e)}};function o(e){return(t,r)=>void 0!==r?((e,t,r)=>{t.constructor.createProperty(r,e)})(e,t,r):i(e,t)}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function s(e){return o({...e,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const l=({finisher:e,descriptor:t})=>(r,n)=>{var i;if(void 0===n){const n=null!==(i=r.originalKey)&&void 0!==i?i:r.key,o=null!=t?{kind:"method",placement:"prototype",key:n,descriptor:t(r.key)}:{...r,key:n};return null!=e&&(o.finisher=function(t){e(t,n)}),o}{const i=r.constructor;void 0!==t&&Object.defineProperty(r,n,t(n)),null==e||e(i,n)}};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function a(e){return l({finisher:(t,r)=>{Object.assign(t.prototype[r],e)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function d(e,t){return l({descriptor:r=>{const n={get(){var t,r;return null!==(r=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e))&&void 0!==r?r:null},enumerable:!0,configurable:!0};if(t){const t="symbol"==typeof r?Symbol():"__"+r;n.get=function(){var r,n;return void 0===this[t]&&(this[t]=null!==(n=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(e))&&void 0!==n?n:null),this[t]}}return n}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function c(e){return l({descriptor:t=>({get(){var t,r;return null!==(r=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelectorAll(e))&&void 0!==r?r:[]},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function h(e){return l({descriptor:t=>({async get(){var t;return await this.updateComplete,null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e)},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var u;const p=null!=(null===(u=window.HTMLSlotElement)||void 0===u?void 0:u.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function f(e){const{slot:t,selector:r}=null!=e?e:{};return l({descriptor:n=>({get(){var n;const i="slot"+(t?`[name=${t}]`:":not([name])"),o=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(i),s=null!=o?p(o,e):[];return r?s.filter((e=>e.matches(r))):s},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function m(e,t,r){let n,i=e;return"object"==typeof e?(i=e.slot,n=e):n={flatten:t},r?f({slot:i,flatten:t,selector:r}):l({descriptor:e=>({get(){var e,t;const r="slot"+(i?`[name=${i}]`:":not([name])"),o=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(r);return null!==(t=null==o?void 0:o.assignedNodes(n))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}},868:(e,t,r)=>{r.r(t),r.d(t,{styleMap:()=>o});var n=r(526);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const i=1;
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const o=(s=class extends class{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,r){this._$Ct=e,this._$AM=t,this._$Ci=r}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}{constructor(e){var t;if(super(e),e.type!==i||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,r)=>{const n=e[r];return null==n?t:t+`${r=r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${n};`}),"")}update(e,[t]){const{style:r}=e.element;if(void 0===this.ct){this.ct=new Set;for(const e in t)this.ct.add(e);return this.render(t)}this.ct.forEach((e=>{null==t[e]&&(this.ct.delete(e),e.includes("-")?r.removeProperty(e):r[e]="")}));for(const e in t){const n=t[e];null!=n&&(this.ct.add(e),e.includes("-")?r.setProperty(e,n):r[e]=n)}return n.Jb}},(...e)=>({_$litDirective$:s,values:e}));var s},225:(e,t,r)=>{r.r(t),r.d(t,{CSSResult:()=>s,LitElement:()=>x,ReactiveElement:()=>g,UpdatingElement:()=>$,_$LE:()=>E,_$LH:()=>w.Al,adoptStyles:()=>d,css:()=>a,defaultConverter:()=>m,getCompatibleStyle:()=>c,html:()=>w.dy,noChange:()=>w.Jb,notEqual:()=>v,nothing:()=>w.Ld,render:()=>w.sY,supportsAdoptingStyleSheets:()=>n,svg:()=>w.YP,unsafeCSS:()=>l});
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),o=new Map;class s{constructor(e,t){if(this._$cssResult$=!0,t!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){let e=o.get(this.cssText);return n&&void 0===e&&(o.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const l=e=>new s("string"==typeof e?e:e+"",i),a=(e,...t)=>{const r=1===e.length?e[0]:t.reduce(((t,r,n)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+e[n+1]),e[0]);return new s(r,i)},d=(e,t)=>{n?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const r=document.createElement("style"),n=window.litNonce;void 0!==n&&r.setAttribute("nonce",n),r.textContent=t.cssText,e.appendChild(r)}))},c=n?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const r of e.cssRules)t+=r.cssText;return l(t)})(e):e;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var h;const u=window.trustedTypes,p=u?u.emptyScript:"",f=window.reactiveElementPolyfillSupport,m={toAttribute(e,t){switch(t){case Boolean:e=e?p:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let r=e;switch(t){case Boolean:r=null!==e;break;case Number:r=null===e?null:Number(e);break;case Object:case Array:try{r=JSON.parse(e)}catch(e){r=null}}return r}},v=(e,t)=>t!==e&&(t==t||e==e),y={attribute:!0,type:String,converter:m,reflect:!1,hasChanged:v};class g extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(e){var t;null!==(t=this.l)&&void 0!==t||(this.l=[]),this.l.push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,r)=>{const n=this._$Eh(r,t);void 0!==n&&(this._$Eu.set(n,r),e.push(n))})),e}static createProperty(e,t=y){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const r="symbol"==typeof e?Symbol():"__"+e,n=this.getPropertyDescriptor(e,r,t);void 0!==n&&Object.defineProperty(this.prototype,e,n)}}static getPropertyDescriptor(e,t,r){return{get(){return this[t]},set(n){const i=this[e];this[t]=n,this.requestUpdate(e,i,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||y}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),this.elementProperties=new Map(e.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const r of t)this.createProperty(r,e[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const r=new Set(e.flat(1/0).reverse());for(const e of r)t.unshift(c(e))}else void 0!==e&&t.push(c(e));return t}static _$Eh(e,t){const r=t.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof e?e.toLowerCase():void 0}o(){var e;this._$Ep=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(e=this.constructor.l)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,r;(null!==(t=this._$Eg)&&void 0!==t?t:this._$Eg=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(r=e.hostConnected)||void 0===r||r.call(e))}removeController(e){var t;null===(t=this._$Eg)||void 0===t||t.splice(this._$Eg.indexOf(e)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Et.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return d(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,r){this._$AK(e,r)}_$ES(e,t,r=y){var n,i;const o=this.constructor._$Eh(e,r);if(void 0!==o&&!0===r.reflect){const s=(null!==(i=null===(n=r.converter)||void 0===n?void 0:n.toAttribute)&&void 0!==i?i:m.toAttribute)(t,r.type);this._$Ei=e,null==s?this.removeAttribute(o):this.setAttribute(o,s),this._$Ei=null}}_$AK(e,t){var r,n,i;const o=this.constructor,s=o._$Eu.get(e);if(void 0!==s&&this._$Ei!==s){const e=o.getPropertyOptions(s),l=e.converter,a=null!==(i=null!==(n=null===(r=l)||void 0===r?void 0:r.fromAttribute)&&void 0!==n?n:"function"==typeof l?l:null)&&void 0!==i?i:m.fromAttribute;this._$Ei=s,this[s]=a(t,e.type),this._$Ei=null}}requestUpdate(e,t,r){let n=!0;void 0!==e&&(((r=r||this.constructor.getPropertyOptions(e)).hasChanged||v)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===r.reflect&&this._$Ei!==e&&(void 0===this._$E_&&(this._$E_=new Map),this._$E_.set(e,r))):n=!1),!this.isUpdatePending&&n&&(this._$Ep=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ep}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((e,t)=>this[t]=e)),this._$Et=void 0);let t=!1;const r=this._$AL;try{t=this.shouldUpdate(r),t?(this.willUpdate(r),null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(r)):this._$EU()}catch(e){throw t=!1,this._$EU(),e}t&&this._$AE(r)}willUpdate(e){}_$AE(e){var t;null===(t=this._$Eg)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(e){return!0}update(e){void 0!==this._$E_&&(this._$E_.forEach(((e,t)=>this._$ES(t,this[t],e))),this._$E_=void 0),this._$EU()}updated(e){}firstUpdated(e){}}g.finalized=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:g}),(null!==(h=globalThis.reactiveElementVersions)&&void 0!==h?h:globalThis.reactiveElementVersions=[]).push("1.2.0");var b,_,w=r(526);const $=g;class x extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var e,t;const r=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=r.firstChild),r}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Dt=(0,w.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Dt)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Dt)||void 0===e||e.setConnected(!1)}render(){return w.Jb}}x.finalized=!0,x._$litElement$=!0,null===(b=globalThis.litElementHydrateSupport)||void 0===b||b.call(globalThis,{LitElement:x});const A=globalThis.litElementPolyfillSupport;null==A||A({LitElement:x});const E={_$AK:(e,t,r)=>{e._$AK(t,r)},_$AL:e=>e._$AL};(null!==(_=globalThis.litElementVersions)&&void 0!==_?_:globalThis.litElementVersions=[]).push("3.1.1")}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};globalThis.nodeExternal={},r(182),r(44),r(110)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
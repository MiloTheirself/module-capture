(()=>{"use strict";var e={834:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.storage=t.pattern=void 0,o(n(57),t),o(n(716),t),o(n(838),t);var s=n(689);Object.defineProperty(t,"pattern",{enumerable:!0,get:function(){return i(s).default}});var l=n(808);Object.defineProperty(t,"storage",{enumerable:!0,get:function(){return i(l).default}})},352:function(e,t){var n,r,o=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){n.set(this,{}),r.set(this,{})}once(e,t){let n=()=>{this.detach(e,n),t(...arguments)};this.on(e,n)}on(e,t){o(this,n,"f")[e]||(o(this,n,"f")[e]=[]),o(this,n,"f")[e].push(t)}detach(e,t){let r;"object"==typeof o(this,n,"f")[e]&&(r=o(this,n,"f")[e].indexOf(t),r>-1&&o(this,n,"f")[e].splice(r,1))}dispatch(e){let t,r,i,s=[].slice.call(arguments,1);if("object"==typeof o(this,n,"f")[e])for(r=o(this,n,"f")[e].slice(),i=r.length,t=0;t<i;t++)r[t].apply(this,s)}action(e){if(o(this,r,"f")[e])return o(this,r,"f")[e](...[].slice.call(arguments,1));console.warn(`Unregistert action call "${e}"`)}catch(e,t){o(this,r,"f")[e]=t}},n=new WeakMap,r=new WeakMap},587:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={},r={};r.epoch=new Date("2020-01-01").getTime(),r.worker=0,r.process=0,r.increment=0,r.binaryString=(e,t)=>e.toString(2).padStart(t,"0"),r.binaryToID=e=>{let t="";for(;e.length>50;){const n=parseInt(e.slice(0,-32),2),r=parseInt((n%10).toString(2)+e.slice(-32),2);t=(r%10).toString()+t,e=Math.floor(n/10).toString(2)+Math.floor(r/10).toString(2).padStart(32,"0")}let n=parseInt(e,2);for(;n>0;)t=(n%10).toString()+t,n=Math.floor(n/10);return t},r.idToBinary=e=>{let t="",n=parseInt(e.slice(0,-10))||0,r=parseInt(e.slice(-10));for(;r>0||n>0;)t=String(1&r)+t,r=Math.floor(r/2),n>0&&(r+=n%2*5e9,n=Math.floor(n/2));return t},n.create=(e,t)=>{e=null!=e?e:Date.now(),t=null!=t?t:r.increment++,r.increment>=4095&&(r.increment=0);let n="";return n+=`${r.binaryString(e-r.epoch,42)}`,n+=`${r.binaryString(r.process,5)}`,n+=`${r.binaryString(r.worker,5)}`,n+=`${r.binaryString(t,12)}`,r.binaryToID(n)},n.read=e=>{const t=r.idToBinary(e).toString(2).padStart(64,"0");return{epoch:r.epoch,timestamp:parseInt(t.substring(0,42),2)+r.epoch,worker:parseInt(t.substring(42,47),2),process:parseInt(t.substring(47,52),2),increment:parseInt(t.substring(52,64),2),binary:t}},t.default=Object.assign({},n)},689:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(57),i=r(n(808)),s={},l={},a=globalThis.nodeExternal;"node-pattern"in a?l.reference=a["node-pattern"]:(l.reference=i.default.create(),a["node-pattern"]=a["node-pattern"]||{collection:l.reference.collection.bind(l.reference),doc:l.reference.doc.bind(l.reference)}),s.reference=e=>{const t=l.reference.doc("node.pattern").get({sync:!0});return e in t?t[e]:(()=>{const t={};return t[e]={render:(t,n)=>o.html` <!-- err; pattern '${e}' not defind --> `,styles:(t,n)=>o.css`
              /* err; pattern '${(0,o.unsafeCSS)(e)}' not defind */
            `,create:({render:n,styles:r})=>{const o=l.reference.doc("node.pattern").get({sync:!0});o[e]={},o[e].styles=null!=r?r:t[e].create,o[e].render=null!=n?n:t[e].create,o[e].create=t[e].create,l.reference.doc("node.pattern").set(o,{merge:!0})}},l.reference.doc("node.pattern").set(t,{merge:!0}),t[e]})()},t.default=Object.assign({},s)},808:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(21)),i={};globalThis.nodeExternal;i.create=()=>new o.default,t.default=Object.assign({},i)},552:function(e,t,n){var r,o=this&&this.__classPrivateFieldSet||function(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n},i=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=s(n(587));t.default=class{constructor(e){r.set(this,void 0),o(this,r,e||{},"f"),this.nonce=l.default.create()}doc(e){return i(this,r,"f").doc(e,this.nonce)}},r=new WeakMap},160:function(e,t,n){var r,o,i=this&&this.__classPrivateFieldSet||function(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(n(352)),d={assign:(...e)=>{let t={},n=e=>{for(let n in e){if(!e.hasOwnProperty(n))return;"[object Object]"===Object.prototype.toString.call(e[n])?t[n]=d.assign(t[n],e[n]):t[n]=e[n]}};for(let t=0;t<e.length;t++)n(e[t]);return t},equals:(e,t)=>{const n=e=>{let t=Object.keys(e);t.sort();let n={};for(let r=0;r<t.length;r++){let o=t[r],i=e[o];n[o]=i}return n};return JSON.stringify(n(e))==JSON.stringify(n(t))}};t.default=class{constructor(){r.set(this,void 0),o.set(this,void 0),i(this,r,new a.default,"f"),i(this,o,{},"f")}onSnapshot(e,t){s(this,r,"f").on("changed",(()=>{e(this.get(t))}))}get(e){return(e=e||{}).sync?Object.assign({},s(this,o,"f")):new Promise((e=>{e({exists:!!Object.keys(s(this,o,"f")).length,data:()=>Object.assign({},s(this,o,"f"))})}))}set(e,t){const n=(t=t||{}).merge?Object.assign({},s(this,o,"f")):{},l=d.assign(n,e),a=!d.equals(n,l);return i(this,o,l,"f"),s(this,r,"f").dispatch("changed"),a}},r=new WeakMap,o=new WeakMap},21:function(e,t,n){var r,o,i=this&&this.__classPrivateFieldSet||function(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(n(587)),d=l(n(352)),c=l(n(552)),u=l(n(160));class h extends d.default{constructor(){super(),r.set(this,{}),o.set(this,{}),i(this,r,{},"f"),i(this,o,{},"f"),this.nonce=a.default.create()}collection(e,t){return t||(t=this.nonce),s(this,r,"f")[e]?s(this,r,"f")[e]:s(this,r,"f")[e]?void 0:(s(this,r,"f")[e]=new c.default(this),s(this,r,"f")[e])}doc(e,t){if(t||(t=this.nonce),-1!=e.indexOf("/")){let t;return e.split("/").forEach(((e,n)=>{t=n%2==0?this.collection(e):this.doc(e)})),t}return s(this,o,"f")[e]?s(this,o,"f")[e]:s(this,o,"f")[e]?void 0:(s(this,o,"f")[e]=new u.default,s(this,o,"f")[e])}}t.default=h,r=new WeakMap,o=new WeakMap},885:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ExampleWireframe=void 0;const i=n(834),s=o(n(162)),l=o(n(267));n(439),n(741);let a=class extends i.LitElement{render(){return[i.html`
        <!---->
        <div class="host-node wireframe">
          <div class="wireframe-aside">
            <!---->
            ${i.pattern.reference("node-wireframe:sandbox").render(this,{})}
            <!---->
          </div>

          <div class="wireframe-inner">
            <!---->
            ${i.pattern.reference("node-wireframe:preview").render(this,{})}
            <!---->
          </div>
        </div>
        <!---->
      `]}firstUpdated(){this.sandbox=l.default.create(this),this.preview=s.default.create(this)}};a.styles=[i.pattern.reference("node-common").styles(),i.pattern.reference("node-wireframe:preview").styles(),i.pattern.reference("node-wireframe:sandbox").styles(),i.css`
      :host {
        position: relative;

        height: 100%;
        width: 100%;

        display: flex;
        flex-direction: row;
        flex: none;

        background: var(--tone-backdrop);
      }

      /**/
      .host-node.wireframe {
        position: absolute;
        inset: 0rem 0rem;

        display: flex;
        flex-direction: row;
      }

      /**/
      .host-node.wireframe > .wireframe-aside,
      .host-node.wireframe > .wireframe-inner {
        display: flex;
        flex-direction: column;

        overflow-x: hidden;
        overflow-y: scroll;
        -ms-overflow-style: none;
        scrollbar-width: none;

        border: 0rem solid;
        border-radius: var(--tone-border-corner);
      }
      .host-node.wireframe > .wireframe-aside::-webkit-scrollbar,
      .host-node.wireframe > .wireframe-inner::-webkit-scrollbar {
        display: none;
      }

      .host-node.wireframe > .wireframe-aside {
        flex: none;
        width: 20rem;
        margin: 0rem var(--node-margin);
        padding: var(--node-gutter) 0rem;
      }

      .host-node.wireframe > .wireframe-inner {
        flex: 1;
        margin: 0rem var(--node-margin) 0rem 0rem;
        padding: calc(var(--node-gutter) + var(--node-overlay-hei)) 0rem var(--node-gutter);
      }
    `],a=r([(0,i.customElement)("example-wireframe")],a),t.ExampleWireframe=a},162:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(695),i={};i.create=e=>new class{constructor(){this.host=e,this.captureing={}}requestCapture({pattern:e}){return r(this,void 0,void 0,(function*(){const t=this.host.shadowRoot.querySelector(`[node-capture-target="${e.nonce}"]`);if(!t)return console.log(`capture-target "${e.nonce}"] not found`);if(e.nonce in this.captureing)return;const n=t,r=(0,o.context)({target:n,option:{capture:{scale:2},resolve:{scale:2}}});this.captureing[e.nonce]=r,this.host.requestUpdate();const i=r.capture();console.log("sandbox:capture",i),delete this.captureing[e.nonce],this.host.requestUpdate();const s=yield i.raster,l=document.createElement("canvas"),a=l.getContext("2d");l.width=s.wid,l.height=s.hei;const d=new ImageData(s.result,s.wid,s.hei);a.putImageData(d,0,0),this.host.sandbox.onCapture({pattern:e.nonce,bounds:i.parsed.bounds,result:{urn:l.toDataURL("image/png")}})}))}},t.default=Object.assign({},i)},180:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.CustomLitElementsSlotted=t.CustomLitElements=void 0;const o=n(834);o.pattern.reference("node-sandbox:patterns").create({styles:(e,t)=>o.css``,render:(e,t)=>{switch(t.nonce){case"sandbox-debug:common-texts":return o.html`
          <!---->
          <style>
            .node-sandbox.common-text {
              display: flex;
              flex-direction: column;

              font-family: monospace;
            }
            .node-sandbox.common-text > *:first-child {
              margin-top: var(--node-gutter);
            }
            .node-sandbox.common-text > *:last-child {
              margin-bottom: var(--node-gutter);
            }
          </style>

          <div class="node-sandbox common-text">
            <!---->
            <h1>Lorem Ipsum</h1>
            <p>
              <span style="background: var(--palette-yellow-lit)"> Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span> Etiam vehicula dui sit amet elit tincidunt cursus. Quisque
              consectetur feugiat lacus, nec condimentum erat aliquam et.
            </p>
            <p>
              Vivamus condimentum ut arcu eu finibus. <span style="background: var(--palette-green-lit)">Sed faucibus, erat eget pretium commodo,</span>arcu libero pellentesque sem, vel viverra nisi
              est vel orci. In lacus neque, dignissim nec ipsum id, dignissim pharetra ligula. Aenean blandit est vel velit feugiat lobortis. Morbi fringilla lacinia neque porta semper.
            </p>
          </div>
          <!---->
        `;case"sandbox-debug:common-images":return o.html`
          <!---->
          <style>
            .node-sandbox.common-images {
              display: flex;
              flex-direction: row;

              font-family: Arial;
            }

            .node-sandbox.common-images > .common-images-cell {
              display: flex;
              flex-direction: column;
              flex: auto;

              width: 50%;
            }
            .node-sandbox.common-images > .common-images-cell > *:first-child {
              height: 300px;
              width: 100%;

              object-fit: cover;
              object-position: center;
              background-size: cover;
              background-position: center;
            }
            .node-sandbox.common-images > .common-images-cell > span {
              margin: 10px auto 0rem;

              font-family: Arial;
              font-size: 15px;
            }
          </style>

          <div class="node-sandbox common-images">
            <!---->
            <div class="common-images-cell">
              <img src="./assets/image/jamie-street-Zqy-x7K5Qcg-unsplash.jpg" />
              <span>image element</span>
            </div>
            <!---->

            <!---->
            <div class="common-images-cell">
              <div style="background-image: url('./assets/image/omid-armin-1k7cHi_drr4-unsplash.jpg');"></div>
              <span>background image</span>
            </div>
            <!---->
          </div>
        `;case"sandbox-debug:common-overflow":return o.html`
          <!---->
          <style>
            .node-sandbox.common-overflow {
              display: flex;
              flex-direction: row;
              flex: none;
            }

            .node-sandbox.common-overflow > .common-overflow-cell {
              display: block;
              flex: 1;
              height: 240px;
            }
            .node-sandbox.common-overflow > .common-overflow-cell:not(:last-child) {
              margin-right: var(--node-margin);
            }

            .node-sandbox.common-overflow > .common-overflow-cell > * {
              display: flex;
              flex-direction: row;
              flex: none;

              min-width: 100%;
              min-height: 100%;

              align-items: center;
              justify-content: center;
            }
            .node-sandbox.common-overflow > .common-overflow-cell span {
              padding: 5px;

              font-family: Arial;
              font-size: 15px;
            }
          </style>

          <div class="node-sandbox common-overflow">
            <!---->
            <div class="common-overflow-cell" style="overflow: hidden scroll;">
              <div style="width: 100%; height: 300px;">
                <span style="background: var(--palette-copper-lit)"> hidden, scroll</span>
              </div>
            </div>
            <!---->

            <!---->
            <div class="common-overflow-cell" style="overflow: scroll hidden;">
              <div style="width: 300px; height: width: 100%;">
                <span style="background: var(--palette-yellow-lit)">scroll, hidden</span>
              </div>
            </div>
            <!---->

            <!---->
            <div class="common-overflow-cell" style="overflow: scroll scroll;">
              <div style="width: 300px; height: 300px;">
                <span style="background: var(--palette-indigo-lit)">scroll, scroll</span>
              </div>
            </div>
            <!---->
          </div>
        `;case"sandbox-debug:common-tables":return o.html`
          <style>
            .node-sandbox.common-tables {
              display: flex;
              flex-direction: row;

              width: 100%;
              overflow: auto auto;
            }

            .node-sandbox.common-tables table {
              border-collapse: collapse;
              border-spacing: 0;
            }
            .node-sandbox.common-tables table td,
            .node-sandbox.common-tables table th {
              padding: 0.25em;
              border: 1px solid #999;

              font-size: 0.925em;
              font-weight: normal;
              white-space: nowrap;
            }
            .node-sandbox.common-tables table b {
              font-weight: bold;
            }
            .node-sandbox.common-tables table td {
              text-align: center;
            }
            .node-sandbox.common-tables table th {
              text-align: left;
              background-color: var(--palette-gray-lit);
            }
          </style>

          <!---->
          <div class="node-type node-sandbox common-tables">
            ${(({times:e,lists:t})=>o.html`
              <table>
                <thead>
                  <tr>
                    <td></td>
                    ${e.map((e=>e?o.html`
                            <!---->
                            <th scope="col">${e.join(" - ")}</th>
                            <!---->
                          `:o.nothing))}
                  </tr>
                </thead>
                <tbody>
                  ${t.map((t=>o.html`
                      <!---->
                      <tr>
                        <th colspan="${e.length+1}" scope="colgroup"><b>${t.title}</b></th>
                      </tr>
                      ${t.rooms.map((t=>o.html`
                          <tr>
                            <th scope="rowgroup">${t.title}</th>
                            ${(()=>{const n=[];for(let r=0;r<e.length;r++){let e=t.tasks.filter((e=>e.times[0]==r))[0];e?(r+=e.times[1]-e.times[0],n.push(o.html`<td colspan="${e.times[1]-e.times[0]+1}" style="background:${e.color};">${e.title}</td>`)):n.push(o.html`<td></td>`)}return n})()}
                          </tr>
                        `))}
                      <!---->
                    `))}
                </tbody>
              </table>
            `)({times:[["8:00","8:45"],["8:55","9:40"],["9:40","10:25"],["10:35","11:20"],["11:20","12:05"],["13:05","13:50"],["13:50","14:35"],["14:45","15:30"],["15:30","16:15"],["16:20","17:10"],["17:20","18:05"]],lists:[{title:"Monday",rooms:[{title:"206",tasks:[{times:[3,4],color:"var(--palette-indigo-lit)",title:"NET"},{times:[5,6],color:"var(--palette-green-lit)",title:"ITSI"},{times:[7,8],color:"var(--palette-blue-lit)",title:"SWT"}]},{title:"308",tasks:[{times:[1,2],color:"var(--palette-yellow-lit)",title:"WISO"}]}]},{title:"Tuesday",rooms:[{title:"206",tasks:[{times:[1,3],color:"var(--palette-indigo-lit)",title:"NET"},{times:[4,4],color:"var(--palette-copper-lit)",title:"DBK"}]},{title:o.html`<abbr title="Online">Onl.</abbr>`,tasks:[{times:[5,8],color:"var(--palette-purple-lit)",title:"JAVA"}]}]},{title:"Wednesday",rooms:[{title:"206",tasks:[{times:[3,4],color:"var(--palette-copper-lit)",title:"DBK"}]},{title:"418",tasks:[{times:[1,2],color:"var(--palette-blue-lit)",title:"MAT"}]}]}]})}
            <!---->
          </div>
          <!---->
        `;case"sandbox-debug:common-inputs":return o.html`
          <!---->
          <style>
            .node-sandbox.common-inputs {
              display: flex;
              flex-direction: row;
              felx-wrap: wrap;

              font-family: Arial;
            }

            .node-sandbox.common-inputs > .common-inputs-cell {
              width: 240px;
            }
            .node-sandbox.common-inputs > .common-inputs-cell > *:first-child {
              display: flex;
              flex-direction: column;
              flex: none;

              overflow: hidden;
            }
            .node-sandbox.common-inputs > .common-inputs-cell > legend {
              font-family: Arial;
              font-size: 15px;
            }
          </style>

          <div class="node-sandbox common-inputs">
            <!---->
            <fieldset class="common-inputs-cell">
              <legend>file-type</legend>
              <div>
                <input type="file" />
              </div>
            </fieldset>

            <fieldset class="common-inputs-cell">
              <legend>text-type</legend>
              <div>
                <input type="text" value="Hello, World!" />
              </div>
            </fieldset>

            <fieldset class="common-inputs-cell">
              <legend>password-type</legend>
              <div>
                <input type="password" value="password123" />
              </div>
            </fieldset>
            <!---->
          </div>
          <!---->
        `;case"sandbox-debug:custom":return o.html`
          <!---->
          <custom-lit-elements>
            <!---->
            <span>this text will not be rendered</span>
            <!---->
          </custom-lit-elements>
          <!---->
        `;case"sandbox-debug:custom-slotted":return o.html`
          <!---->
          <custom-lit-elements-slotted>
            <!---->
            <span slot="title">title</span>
            <span>body</span>
            <!---->
          </custom-lit-elements-slotted>
          <!---->
        `}}});let i=class extends o.LitElement{constructor(){super(...arguments),this.enabled=!0,this.hidden=!1}render(){const e={backgroundColor:this.enabled?"lightgreen":"transparent",opacity:this.hidden?"0.2":"1",padding:"10px"};return o.html`
      <h3>styleMap directive example</h3>

      <p style=${(0,o.styleMap)(e)}>Hello style!</p>
      <hr />
      <label>
        <input type="checkbox" .checked=${this.enabled} @change=${this.toggleEnabled} />
        Enabled
      </label>
      <label>
        <input type="checkbox" .checked=${this.hidden} @change=${this.toggleHidden} />
        Hidden
      </label>
    `}toggleEnabled(){this.enabled=!this.enabled}toggleHidden(){this.hidden=!this.hidden}};r([(0,o.property)({type:Boolean})],i.prototype,"enabled",void 0),r([(0,o.property)({type:Boolean})],i.prototype,"hidden",void 0),i=r([(0,o.customElement)("custom-lit-elements")],i),t.CustomLitElements=i;let s=class extends o.LitElement{render(){return o.html`
      <h3>inside h3: "<slot name="title"></slot>"</h3>
      <div>
        <p>inside p: "<slot></slot>"</p>
      </div>
    `}};s=r([(0,o.customElement)("custom-lit-elements-slotted")],s),t.CustomLitElementsSlotted=s},267:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),n(180);const r={};r.create=e=>new class{constructor(){this.section={common:{label:"Common Elements"},custom:{label:"Shadow DOM & CustomElements"}},this.pattern={"sandbox-debug:common-texts":{section:"common",label:"Text and Boxes"},"sandbox-debug:common-overflow":{section:"common",label:"Overflow"},"sandbox-debug:common-tables":{section:"common",label:"Tables"},"sandbox-debug:common-images":{section:"common",label:"Images"},"sandbox-debug:common-inputs":{section:"custom",label:"Input (Form Input) element"},"sandbox-debug:custom":{section:"custom",label:"Native CustomElement"},"sandbox-debug:custom-slotted":{section:"custom",label:"Native CustomElement (slotted)"}},this.host=e,this.requestSync(),this.requestUpdate()}requestPush(){const e={pattern:{}};for(const t in this.pattern)e.pattern[t]=this.pattern[t].active;globalThis.localStorage.setItem("example:sandbox",JSON.stringify(e))}requestSync(){const e=JSON.parse(globalThis.localStorage.getItem("example:sandbox"));if(e&&"pattern"in e)for(const t in this.pattern)t in e.pattern&&(this.pattern[t].active=e.pattern[t])}requestUpdate(){const e=Object.keys(this.section).map((e=>{const t=Object.keys(this.pattern).filter((t=>this.pattern[t].section==e)).map((e=>({nonce:e,label:this.pattern[e].label,state:this.pattern[e].active?2:0,nodes:[],value:this.pattern[e].value||{}})));let n=0;return n+=t.length==t.filter((e=>2==e.state)).length?1:0,n+=t.filter((e=>e.state>=1)).length?1:0,{nonce:e,label:this.section[e].label,state:n,nodes:t}}));let t=0;t+=e.length==e.filter((e=>2==e.state)).length?1:0,t+=e.filter((e=>e.state>=1)).length?1:0,this.patternRender=[{nonce:"*",label:"All",state:t,nodes:e}],this.requestPush(),this.host.requestUpdate()}onCapture({pattern:e,result:t,bounds:n}){this.pattern[e].value={result:t,bounds:n},this.requestUpdate()}onAction(e){if("keydown"==e.type&&"Space"!=e.code&&"Enter"!=e.code)return;null==e||e.preventDefault();const t=e.target.getAttribute("node-nonce")||e.target.parentNode.getAttribute("node-nonce");switch(!0){case"*"==t:{let e=!0;Object.keys(this.pattern).forEach((t=>{this.pattern[t].active||(e=!1)})),Object.keys(this.pattern).forEach((t=>{this.pattern[t].active=!e}));break}case t in this.section:{let e=!0;Object.keys(this.pattern).forEach((n=>{let r=this.pattern[n];r.section!=t||r.active||(e=!1)})),Object.keys(this.pattern).forEach((n=>{let r=this.pattern[n];r.section==t&&(r.active=!e)}));break}case t in this.pattern:this.pattern[t].active=!this.pattern[t].active}this.requestUpdate()}},t.default=Object.assign({},r)},698:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(834);r.pattern.reference("node-wireframe:preview-grid").create({styles:(e,t)=>r.css`
    /**/
    .host-node.preview-grid-row {
      margin: 0rem 0rem var(--node-gutter);
      padding: 0rem var(--node-gutter);
    }
    .host-node.preview-grid-row:not(:first-child) {
      margin: var(--node-margin) 0rem var(--node-gutter);
    }

    /**/
    .host-node.preview-grid {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;

      margin: 0rem calc(0rem - var(--node-margin) / 2);
    }
    .host-node.preview-grid:first-child {
      margin-top: calc(0rem - var(--node-gutter) / 2);
    }
    .host-node.preview-grid:last-child {
      margin-bottom: calc(0rem - var(--node-gutter) / 2);
    }

    /**/
    .host-node.preview-grid > * {
      width: min(calc(100% - var(--node-margin)), 60rem);
      margin: calc(var(--node-gutter) / 2) calc(var(--node-margin) / 2);

      overflow: hidden;
    }
  `,render:(e,t)=>r.html`
    <!---->
    ${t.nodes.filter((e=>e.state>=1)).map((t=>r.html`
          <div class="host-node preview-grid">
            ${t.nodes.filter((e=>e.state>=1)).map((n=>r.html`
                  <!---->
                  ${r.pattern.reference("node-wireframe:preview-grid-cell").render(e,{nonce:n.nonce,label:[t.label,n.label],value:n.value})}
                  <!---->
                `))}
          </div>
        `))}
    <!---->
  `}),r.pattern.reference("node-wireframe:preview-grid-cell").create({styles:(e,t)=>r.css`
    /**/
    .host-node.preview-grid-cell {
      display: flex;
      flex-direction: column;
      flex-wrap: column;
      flex: none;
    }

    /**/
    .host-node.preview-grid-cell .cell-figure,
    .host-node.preview-grid-cell .cell-figure-result {
      display: flex;
      flex-direction: column;
      flex: none;

      margin: 0rem 0rem;
      padding: var(--node-gutter) var(--node-margin);

      border: 0rem solid;
      border-radius: var(--tone-border-corner);
      background: var(--tone-backdrop-dim);

      overflow: auto auto;
    }

    /**/
    .host-node.preview-grid-cell .cell-figure > * {
      display: flex;
      flex-direction: column;
      flex: none;
    }

    .host-node.preview-grid-cell .cell-figure-result {
      position: relative;
      margin: var(--node-gutter) 0rem 0rem;

      background: var(--tone-backdrop-dim);
    }
    .host-node.preview-grid-cell .cell-figure-result:after {
      content: '';

      position: absolute;
      inset: 0rem 0rem;

      background-color: #323a43;
      background-image: linear-gradient(45deg, var(--tone-type-drk) 25%, transparent 25%, transparent 75%, var(--tone-type-drk) 75%, var(--tone-type-drk)),
        linear-gradient(45deg, var(--tone-type-drk) 25%, transparent 25%, transparent 75%, var(--tone-type-drk) 75%, var(--tone-type-drk));
      background-size: 1rem 1rem;
      background-position: 0 0, 0.5rem 0.5rem;

      opacity: 0;
      pointer-events: none;
      transition: opacity var(--timing-wait) var(--timing-func);
    }
    .host-node.preview-grid-cell .cell-figure-result:hover:after {
      opacity: 1;
    }
    .host-node.preview-grid-cell .cell-figure-result > * {
      position: relative;
      z-index: 1;
      /*overflow: scroll;*/
    }
    .host-node.preview-grid-cell .cell-figure-result > * img {
      position: absolute;
      inset: 0rem 0rem;
      height: 100%;
      width: 100%;

      image-rendering: auto;
    }

    /**/
    .host-node.preview-grid-cell .cell-actions,
    .host-node.preview-grid-cell .cell-caption {
      display: flex;
      flex-direction: row;
      flex-wrap: column;

      margin: 0rem calc(0rem - var(--node-gutter-sm) / 2);
      padding: 0rem var(--node-gutter);
    }
    .host-node.preview-grid-cell .cell-actions > *,
    .host-node.preview-grid-cell .cell-caption > * {
      margin: 0rem calc(var(--node-gutter-sm) / 2) 0rem calc(var(--node-gutter-sm) / 2);
      color: var(--tone-type-dim);
    }
    .host-node.preview-grid-cell .cell-caption > *:last-child {
      color: var(--tone-type);
    }
  `,render:(e,t)=>r.html`
    <div class="host-node preview-grid-cell">
      <!---->
      <div class="grid-node wireframe-row">
        <!---->
        <div class="wireframe-row-inner">
          <div class="cell-caption">
            ${[...t.label].map(((e,n)=>n==t.label.length-1?r.html`
                    <!---->
                    <span class="node-type description-sm">${e}</span>
                    <!---->
                  `:r.html`
                    <!---->
                    <span class="node-type description-sm">${e}</span>
                    <span class="node-type description-sm"> › </span>
                    <!---->
                  `))}
          </div>
        </div>
        <!---->

        <!---->
        <div class="wireframe-row-inner">
          <div class="cell-actions">
            ${t.nonce in e.preview.captureing?r.html` <node-loader node-active="true"></node-loader>`:r.html`
                  <!---->
                  <label class="wireframe-node action" @click="${e.preview.requestCapture.bind(e.preview,{pattern:t})}">
                    <span class="node-type action">Capture</span>
                  </label>
                  <!---->
                `}
          </div>
        </div>
        <!---->
      </div>
      <!---->

      <!---->
      <figure class="cell-figure" ?node-unresolved="${t.nonce in e.preview.captureing}">
        <div node-capture-target="${t.nonce}">
          <!---->
          ${r.pattern.reference("node-sandbox:patterns").render(e,t)}
          <!---->
        </div>
      </figure>
      <!---->

      <!---->
      ${"result"in t.value?r.html`
            <!---->
            <figure class="cell-figure-result">
              <div style="width: ${t.value.bounds.wid}px; height: ${t.value.bounds.hei}px;">
                <!---->
                <img src="${t.value.result.urn}" />
                <!---->
              </div>
            </figure>
            <!---->
          `:r.html``}

      <!---->
    </div>
  `})},439:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(834);n(698),r.pattern.reference("node-wireframe:preview").create({styles:(e,t)=>r.css`
    ${r.pattern.reference("node-wireframe:preview-grid").styles()}
    ${r.pattern.reference("node-wireframe:preview-grid-cell").styles()}

    /**/
    .host-node.preview {
      display: flex;
      flex-direction: column;
      flex: 1;
    }

    /**/
    .host-node.preview-none {
      display: flex;
      flex-direction: column;
      flex: auto;
      align-items: center;
      justify-content: center;
    }
  `,render:(e,t)=>{return r.html`
    <div class="host-node preview">
      <!---->
      ${e.sandbox&&0!=e.sandbox.patternRender[0].state?(n=e.sandbox.patternRender[0].nodes,r.pattern.reference("node-wireframe:preview-grid").render(e,{nodes:n})):r.html`
            <!---->
            <div class="host-node preview-none">
              <span class="node-type description-sm">Selected snippets will be displayed here</span>
            </div>
            <!---->
          `}
      <!---->
    </div>
  `;var n}})},741:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(834);r.pattern.reference("node-wireframe:sandbox-node").create({styles:(e,t)=>r.css`
    /**/
    .host-node.sandbox-checkbox {
      display: flex;
      flex-direction: row;
      flex: none;
      align-items: center;

      height: 1.875rem;
      margin: 0rem 0rem 0rem calc(0rem - var(--node-gutter));
      padding: 0rem var(--node-gutter);

      cursor: pointer;
    }

    .host-node.sandbox-checkbox input[checked] {
      opacity: 1;
    }
    .host-node.sandbox-checkbox input[checked]:not([all-checked]) {
      opacity: 0.5;
    }

    .host-node.sandbox-checkbox > * {
      margin: 0rem 0rem;

      user-select: none;
      pointer-events: none;
    }
    .host-node.sandbox-checkbox > *:not(:last-child) {
      margin: 0rem var(--node-gutter) 0rem 0rem;
    }
  `,render:(e,t)=>r.html`
    <label class="host-node sandbox-checkbox" node-nonce="${t.nonce}" @click="${e.sandbox.onAction.bind(e.sandbox)}" @keydown="${e.sandbox.onAction.bind(e.sandbox)}">
      <input type="checkbox" ?checked="${t.state>=1}" ?all-checked="${t.state>=2||!t.nodes.length}" />
      <span class="node-type action">${t.label}</span>
    </label>
    ${t.nodes.length?r.html`
          <!---->
          <ul>
            ${t.nodes.map((t=>r.html`
                <!---->
                <li>
                  ${r.pattern.reference("node-wireframe:sandbox-node").render(e,t)}
                </li>
                <!---->
              `))}
          </ul>
          <!---->
        `:r.nothing}
  `}),r.pattern.reference("node-wireframe:sandbox").create({styles:(e,t)=>r.css`
    ${r.pattern.reference("node-wireframe:sandbox-node").styles(e,t)}

    /**/
    .host-node.sandbox {
      dispaly: flex;
      flex-direction: column;
    }

    /**/
    .host-node.sandbox-header {
      display: flex;
      flex-direction: column;
      flex: none;

      margin: 0rem 0rem var(--node-margin);
    }

    .host-node.sandbox-header ul {
      margin: 0rem 0rem;
      padding: 0rem 0rem 0rem var(--node-margin);
    }
    .host-node.sandbox-header li {
      margin: 0rem 0rem;
      padding: 0rem 0rem;
      list-style: none;
    }
  `,render:(e,t)=>r.html`
    <div class="host-node sandbox">
      <!---->
      <div class="host-node sandbox-header">
        ${e.sandbox?[...e.sandbox.patternRender].map((t=>r.pattern.reference("node-wireframe:sandbox-node").render(e,t))):r.nothing}
      </div>
      <!---->
    </div>
  `})},695:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.capture=t.context=void 0;const r=n(891);function o(e){const{target:t,option:n}=r.Capture.choose({params:e});return{preview:e=>{const{render:o}=r.Capture.choose({params:e}),{parsed:i}=r.Capture.parser({target:t,option:n,render:o});return{parsed:i,raster:null,vector:null}},capture:e=>{const{render:o}=r.Capture.choose({params:e}),{parsed:i}=r.Capture.parser({target:t,render:o,option:n}),{raster:s,vector:l}=r.Capture.render({parsed:i,option:n});return{parsed:i,raster:s,vector:l}}}}t.context=o,t.capture=function(e){const{target:t,option:n,render:i}=r.Capture.choose({params:e});return o({target:t,option:n}).capture({render:i})}},891:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Capture=void 0;const o=r(n(308)),i=r(n(794)),s={},l={};s.choose=({params:e})=>{let{target:t,option:n,render:r}=e||{};return t=l.chooseTarget({target:t}),n=l.chooseOption({option:n}),r=l.chooseRender({render:r}),{target:t,option:n,render:r}},l.chooseTarget=({target:e})=>{switch(!0){case null==e:e={node:globalThis.document.body.parentElement,invalid:!1};break;case e&&e.cloneNode instanceof Function:e={node:e,invalid:!1};break;default:e={node:null,invalid:!0}}return e},l.chooseOption=({option:e})=>({capture:Object.assign({dpr:globalThis.devicePixelRatio||1},e&&e.capture?e.capture:{}),resolve:Object.assign({dpr:1},e&&e.resolve?e.resolve:{})}),l.chooseRender=({render:e})=>(e=null!=e?e:{},Array.isArray(e)?e:[e]),t.Capture=Object.assign(Object.assign(Object.assign({},o.default),i.default),s)},308:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=r(n(122)),s={parser:({target:e,option:t,render:n})=>{if(e.invalid)return{parsed:null};const r=i.default.replica({target:e,option:t});return{parsed:{bounds:o.default.applied({target:e}).bounds,result:r.result,pledge:r.pledge}}}};t.default=Object.assign({},s)},865:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={},r={translateScroll:()=>{if("scroll"in r&&r.scroll.dpr==globalThis.devicePixelRatio)return;const e=document.createElement("div");e.style.height="100px",e.style.width="100px",e.style.overflow="scroll scroll",document.body.appendChild(e),r.scroll={dpr:globalThis.devicePixelRatio,hei:e.offsetWidth-e.scrollWidth,wid:e.offsetHeight-e.scrollHeight},document.body.removeChild(e)}};r.translateScroll(),globalThis.addEventListener("resize",r.translateScroll),n.applied=({target:e})=>{const t=!(e.node instanceof Element),n=t?{}:e.node.getBoundingClientRect(),o={x:n.x,y:n.y,wid:e.node.offsetWidth||0,hei:e.node.offsetHeight||0},i={x:e.node.scrollLeft,y:e.node.scrollTop,hei:r.scroll.hei,wid:r.scroll.wid};return{offset:t?[0,0,0,0]:[Math.min(0,0-i.y),Math.min(0,0-(e.node.scrollWidth-i.x-e.node.offsetWidth)),Math.min(0,0-(e.node.scrollHeight-i.y-e.node.offsetHeight)),Math.min(0,0-i.x)],styles:t?{}:globalThis.getComputedStyle(e.node),bounds:o,scroll:i}},n.visible=({target:e})=>{const t=e.node.nodeName.toLowerCase();if(-1!=["#comment","style","script"].indexOf(t))return!1;"offsetParent"in e.node&&e.node.offsetParent;const{styles:r}=n.applied({target:e});return!r||"none"!=r.display},n.hastype=({target:e,typ:t})=>-1!=[...t].indexOf(e.node.nodeName.toLowerCase()),t.default=Object.assign({},n)},122:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(n(865)),s=o(n(740)),l={},a={};l.replica=({target:e,option:t,pledge:n})=>{if(n=n||[],!i.default.visible({target:e}))return{result:null};const{result:r}=a.imitate({target:e,option:t,pledge:n}),{nested:o,shadow:s}=a.inserts({target:e,option:t,pledge:n}),l=r.node.childNodes[0]||r.node;s.length?(s.forEach((e=>{l.appendChild(e.result.node)})),r.node.querySelectorAll("slot").forEach((e=>{const t=e.getAttribute("name");o.forEach((n=>{t==n.insert&&e.parentNode.insertBefore(n.result.node,e)}))}))):o.forEach((e=>{l.appendChild(e.result.node)}));return{result:r,insert:e.node.getAttribute?e.node.getAttribute("slot"):null,pledge:n}},a.inserts=({target:e,option:t,pledge:n})=>{var r,o,i;const s=({nestedNodes:e})=>[...e&&e.length?e:[]].map((e=>l.replica({target:{node:e},option:t,pledge:n}))).filter((({result:e})=>null!=e));return{nested:s({nestedNodes:null===(r=e.node)||void 0===r?void 0:r.childNodes}),shadow:s({nestedNodes:null===(i=null===(o=e.node)||void 0===o?void 0:o.shadowRoot)||void 0===i?void 0:i.childNodes})}},a.imitate=({target:e,option:t,pledge:n})=>{if(i.default.hastype({target:e,typ:["slot"]}))return{result:{node:e.node.cloneNode(!0),slot:e.node.getAttribute("name")||""}};const r=i.default.hastype({target:e,typ:["svg","img"]})?{node:a.replace({target:e,pledge:n}).result.node,slot:null}:i.default.hastype({target:e,typ:["#text"]})?{node:e.node.cloneNode(!1),slot:null}:i.default.hastype({target:e,typ:["input","fieldset","legend","table","tr","td","th","thead","tbody"]})?{node:document.createElement(e.node.nodeName),slot:null}:{node:document.createElement("div"),slot:null};return a.stylize({target:e,result:r,option:t,pledge:n}),a.offsets({target:e,result:r,option:t,pledge:n}),a.inherit({target:e,result:r,option:t,pledge:n}),{result:r}},a.stylize=({target:e,result:t,option:n,pledge:r})=>{if(!("style"in e.node))return;const o=i.default.applied({target:e}),s=i.default.applied({target:t});Object.values(o.styles).forEach((e=>{let n=o.styles.getPropertyValue(e);0!=e.indexOf("-")&&n!=s.styles.getPropertyValue(e)&&t.node.style.setProperty(e,n)})),"none"!=t.node.style.getPropertyValue("background-image")&&r.push(a.pledge.backgroundImage({target:e,result:t,option:n}))},a.offsets=({target:e,result:t})=>{if(!("style"in e.node))return;const{scroll:n,offset:r,bounds:o}=i.default.applied({target:e});let s=0!=r[3]||0!=r[1],l=0!=r[0]||0!=r[2];if(s||l){t.node.style.setProperty("overflow-x",""+(s?"scroll":"hidden")),t.node.style.setProperty("overflow-y",""+(l?"scroll":"hidden"));const o={node:document.createElement("div"),wid:e.node.offsetWidth-r[3]-(l?n.wid:0),hei:e.node.offsetHeight-r[0]-(s?n.hei:0)};o.node.style.setProperty("margin",`${r.join("px ")}px`),o.node.style.setProperty("width",`${o.wid}px`),o.node.style.setProperty("height",`${o.hei}px`),o.node.style.setProperty("overflow","hidden"),t.node.appendChild(o.node)}},a.replace=({target:e,pledge:t})=>{const n={node:document.createElement("div")};return i.default.hastype({target:e,typ:["svg"]})&&t.push(a.pledge.vectorImage({target:e,result:n})),i.default.hastype({target:e,typ:["img"]})&&t.push(a.pledge.rasterImage({target:e,result:n})),{result:n}},a.inherit=({target:e,result:t})=>{if("style"in e.node){if(i.default.hastype({target:e,typ:["td","th"]})){const n=e.node.getAttribute("rowspan"),r=e.node.getAttribute("colspan");n&&t.node.setAttribute("rowspan",n),r&&t.node.setAttribute("colspan",r)}if(i.default.hastype({target:e,typ:["input"]})){const n=e.node.getAttribute("type");n&&t.node.setAttribute("type",n),e.node.checked&&t.node.setAttribute("checked",""),e.node.value&&t.node.setAttribute("value",e.node.value)}}},a.pledge={},a.pledge.vectorImage=({target:e,result:t})=>new Promise((e=>{e()})),a.pledge.rasterImage=({target:e,result:t})=>new Promise((n=>r(void 0,void 0,void 0,(function*(){const r=yield a.pledge.urlAsUrn({url:e.node.src});t.node.style.setProperty("background-image",`url("${r||"none"}")`),n()})))),a.pledge.backgroundImage=({target:e,result:t})=>new Promise((e=>r(void 0,void 0,void 0,(function*(){const n=t.node.style.getPropertyValue("background-image").slice(5,-2),r=yield a.pledge.urlAsUrn({url:n});t.node.style.setProperty("background-image",`url("${r||"none"}")`),e()})))),a.pledge.urlAsUrn=({url:e})=>new Promise((t=>{const n=new Image;n.onload=()=>r(void 0,void 0,void 0,(function*(){const e=s.default.blank({wid:n.width,hei:n.height,typ:"node"});e.ctx.drawImage(n,0,0,n.width,n.height),t(e.can.toDataURL("image/png"))})),n.onerror=e=>{t()},n.src=e})),t.default=Object.assign({},l)},794:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(n(870)),s=o(n(740)),l={},a={};l.render=({parsed:e,option:t})=>{const n=a.parseAsVector({parsed:e});return{parsed:e,raster:a.parseAsRaster({vector:n,option:t}),vector:n}},a.parseAsVector=({parsed:e})=>new Promise((t=>r(void 0,void 0,void 0,(function*(){const n=new Image;n.onload=()=>{n.onload=null,t({wid:n.width,hei:n.height,vec:n})},yield Promise.all(e.pledge);const r=yield e.result,o=(new globalThis.XMLSerializer).serializeToString(r.node);n.src=i.default.svgData({svg:globalThis.encodeURIComponent(`<svg xmlns="http://www.w3.org/2000/svg" \n        width="${e.bounds.wid}" \n        height="${e.bounds.hei}">\n        <foreignObject width="100%" height="100%">${o}</foreignObject>\n      </svg>`)})})))),a.parseAsRaster=({vector:e,option:t})=>new Promise((n=>r(void 0,void 0,void 0,(function*(){const r=yield e,o=s.default.blank({wid:Math.round(r.wid*t.capture.scale),hei:Math.round(r.hei*t.capture.scale)});o.ctx.drawImage(r.vec,0,0,r.wid*t.capture.scale,r.hei*t.capture.scale);const i=t.resolve.scale<=1?o:yield(()=>{const e=s.default.blank({wid:o.wid*Math.ceil(t.resolve.scale),hei:o.hei*Math.ceil(t.resolve.scale)});return s.default.scale({target:e,canvas:o,resize:t.resolve.scale})})();n({wid:i.wid,hei:i.hei,result:i.ctx.getImageData(0,0,i.wid,i.hei).data})})))),t.default=Object.assign({},l)},740:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={blank:({wid:e,hei:t,typ:n})=>{const r="node"!=n&&"OffscreenCanvas"in globalThis?new globalThis.OffscreenCanvas(10,10):document.createElement("canvas"),o=r.getContext("2d");return r.width=Math.round(e),r.height=Math.round(t),{can:r,ctx:o,wid:e,hei:t}},pixel:({ctx:e})=>e.getImageData(0,0,e.wid,e.hei),scale:({target:e,canvas:t,resize:r})=>"Worker"in globalThis?new Promise((o=>{const i=`\n      const internal = {};\n      internal.blank = ${n.blank.toString()}\n      internal.scale = ${n.scaleNearestNeighbor.toString()}\n\n      globalThis.onmessage = ((event) => {\n        const canvas = internal.blank({\n          wid: event.data.pixels.width,\n          hei: event.data.pixels.height\n        });\n\n        const resize = event.data.resize;\n        const target = internal.blank({\n          wid: canvas.wid * resize,\n          hei: canvas.hei * resize,\n        });\n\n        canvas.ctx.putImageData(event.data.pixels, 0, 0);\n        globalThis.postMessage({\n          pixels: internal\n            .scale({target, canvas, resize})\n            .ctx.getImageData(0, 0, target.wid, target.hei)\n        });\n      });\n\n      self.postMessage({ });\n    `,s=URL.createObjectURL(new Blob([i])),l=new Worker(s);URL.revokeObjectURL(s),l.onmessage=n=>{if("pixels"in n.data)return e.ctx.putImageData(n.data.pixels,0,0),o(e);l.postMessage({pixels:t.ctx.getImageData(0,0,t.wid,t.hei),resize:r})}})):n.scaleNearestNeighbor({canvas:t,resize:r}),scaleNearestNeighbor:({target:e,canvas:t,resize:n})=>{const r=e.ctx.getImageData(0,0,e.wid,e.hei),o=t.ctx.getImageData(0,0,t.wid,t.hei);let i,s,l,a,d,c,u=4*e.wid,h=u*n,p=4*t.wid,f=4*n;for(let e=0;e<=t.hei;e++){i=e*p,s=e*h;for(let e=0;e<=p;e+=4){l=i+e,a=s+e*n;for(let e=0;e<n;e++){d=e*u;for(let e=0;e<f;e+=4)c=d+a+e,r.data[c]=o.data[l],r.data[c+1]=o.data[l+1],r.data[c+2]=o.data[l+2],r.data[c+3]=o.data[l+3]}}}return e.ctx.putImageData(r,0,0),e}};t.default=Object.assign({},n)},870:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n={svgData:({svg:e})=>`data:image/svg+xml,${e}`};t.default=Object.assign({},n)},378:(e,t,n)=>{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var r;n.d(t,{Al:()=>L,dy:()=>x,Jb:()=>A,Ld:()=>E,sY:()=>k,YP:()=>$});const o=globalThis.trustedTypes,i=o?o.createPolicy("lit-html",{createHTML:e=>e}):void 0,s=`lit$${(Math.random()+"").slice(9)}$`,l="?"+s,a=`<${l}>`,d=document,c=(e="")=>d.createComment(e),u=e=>null===e||"object"!=typeof e&&"function"!=typeof e,h=Array.isArray,p=e=>{var t;return h(e)||"function"==typeof(null===(t=e)||void 0===t?void 0:t[Symbol.iterator])},f=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,m=/-->/g,g=/>/g,v=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,b=/'/g,y=/"/g,w=/^(?:script|style|textarea)$/i,_=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),x=_(1),$=_(2),A=Symbol.for("lit-noChange"),E=Symbol.for("lit-nothing"),S=new WeakMap,k=(e,t,n)=>{var r,o;const i=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let s=i._$litPart$;if(void 0===s){const e=null!==(o=null==n?void 0:n.renderBefore)&&void 0!==o?o:null;i._$litPart$=s=new T(t.insertBefore(c(),e),e,void 0,null!=n?n:{})}return s._$AI(e),s},P=d.createTreeWalker(d,129,null,!1),O=(e,t)=>{const n=e.length-1,r=[];let o,l=2===t?"<svg>":"",d=f;for(let t=0;t<n;t++){const n=e[t];let i,c,u=-1,h=0;for(;h<n.length&&(d.lastIndex=h,c=d.exec(n),null!==c);)h=d.lastIndex,d===f?"!--"===c[1]?d=m:void 0!==c[1]?d=g:void 0!==c[2]?(w.test(c[2])&&(o=RegExp("</"+c[2],"g")),d=v):void 0!==c[3]&&(d=v):d===v?">"===c[0]?(d=null!=o?o:f,u=-1):void 0===c[1]?u=-2:(u=d.lastIndex-c[2].length,i=c[1],d=void 0===c[3]?v:'"'===c[3]?y:b):d===y||d===b?d=v:d===m||d===g?d=f:(d=v,o=void 0);const p=d===v&&e[t+1].startsWith("/>")?" ":"";l+=d===f?n+a:u>=0?(r.push(i),n.slice(0,u)+"$lit$"+n.slice(u)+s+p):n+s+(-2===u?(r.push(void 0),t):p)}const c=l+(e[n]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==i?i.createHTML(c):c,r]};class C{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let i=0,a=0;const d=e.length-1,u=this.parts,[h,p]=O(e,t);if(this.el=C.createElement(h,n),P.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=P.nextNode())&&u.length<d;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith("$lit$")||t.startsWith(s)){const n=p[a++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+"$lit$").split(s),t=/([.?@])?(.*)/.exec(n);u.push({type:1,index:i,name:t[2],strings:e,ctor:"."===t[1]?N:"?"===t[1]?I:"@"===t[1]?D:U})}else u.push({type:6,index:i})}for(const t of e)r.removeAttribute(t)}if(w.test(r.tagName)){const e=r.textContent.split(s),t=e.length-1;if(t>0){r.textContent=o?o.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],c()),P.nextNode(),u.push({type:2,index:++i});r.append(e[t],c())}}}else if(8===r.nodeType)if(r.data===l)u.push({type:2,index:i});else{let e=-1;for(;-1!==(e=r.data.indexOf(s,e+1));)u.push({type:7,index:i}),e+=s.length-1}i++}}static createElement(e,t){const n=d.createElement("template");return n.innerHTML=e,n}}function j(e,t,n=e,r){var o,i,s,l;if(t===A)return t;let a=void 0!==r?null===(o=n._$Cl)||void 0===o?void 0:o[r]:n._$Cu;const d=u(t)?void 0:t._$litDirective$;return(null==a?void 0:a.constructor)!==d&&(null===(i=null==a?void 0:a._$AO)||void 0===i||i.call(a,!1),void 0===d?a=void 0:(a=new d(e),a._$AT(e,n,r)),void 0!==r?(null!==(s=(l=n)._$Cl)&&void 0!==s?s:l._$Cl=[])[r]=a:n._$Cu=a),void 0!==a&&(t=j(e,a._$AS(e,t.values),a,r)),t}class M{constructor(e,t){this.v=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(e){var t;const{el:{content:n},parts:r}=this._$AD,o=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:d).importNode(n,!0);P.currentNode=o;let i=P.nextNode(),s=0,l=0,a=r[0];for(;void 0!==a;){if(s===a.index){let t;2===a.type?t=new T(i,i.nextSibling,this,e):1===a.type?t=new a.ctor(i,a.name,a.strings,this,e):6===a.type&&(t=new H(i,this,e)),this.v.push(t),a=r[++l]}s!==(null==a?void 0:a.index)&&(i=P.nextNode(),s++)}return o}m(e){let t=0;for(const n of this.v)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class T{constructor(e,t,n,r){var o;this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cg=null===(o=null==r?void 0:r.isConnected)||void 0===o||o}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cg}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=j(this,e,t),u(e)?e===E||null==e||""===e?(this._$AH!==E&&this._$AR(),this._$AH=E):e!==this._$AH&&e!==A&&this.$(e):void 0!==e._$litType$?this.T(e):void 0!==e.nodeType?this.S(e):p(e)?this.A(e):this.$(e)}M(e,t=this._$AB){return this._$AA.parentNode.insertBefore(e,t)}S(e){this._$AH!==e&&(this._$AR(),this._$AH=this.M(e))}$(e){this._$AH!==E&&u(this._$AH)?this._$AA.nextSibling.data=e:this.S(d.createTextNode(e)),this._$AH=e}T(e){var t;const{values:n,_$litType$:r}=e,o="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=C.createElement(r.h,this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===o)this._$AH.m(n);else{const e=new M(o,this),t=e.p(this.options);e.m(n),this.S(t),this._$AH=e}}_$AC(e){let t=S.get(e.strings);return void 0===t&&S.set(e.strings,t=new C(e)),t}A(e){h(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const o of e)r===t.length?t.push(n=new T(this.M(c()),this.M(c()),this,this.options)):n=t[r],n._$AI(o),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cg=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class U{constructor(e,t,n,r,o){this.type=1,this._$AH=E,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=o,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=E}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const o=this.strings;let i=!1;if(void 0===o)e=j(this,e,t,0),i=!u(e)||e!==this._$AH&&e!==A,i&&(this._$AH=e);else{const r=e;let s,l;for(e=o[0],s=0;s<o.length-1;s++)l=j(this,r[n+s],t,s),l===A&&(l=this._$AH[s]),i||(i=!u(l)||l!==this._$AH[s]),l===E?e=E:e!==E&&(e+=(null!=l?l:"")+o[s+1]),this._$AH[s]=l}i&&!r&&this.k(e)}k(e){e===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class N extends U{constructor(){super(...arguments),this.type=3}k(e){this.element[this.name]=e===E?void 0:e}}const R=o?o.emptyScript:"";class I extends U{constructor(){super(...arguments),this.type=4}k(e){e&&e!==E?this.element.setAttribute(this.name,R):this.element.removeAttribute(this.name)}}class D extends U{constructor(e,t,n,r,o){super(e,t,n,r,o),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=j(this,e,t,0))&&void 0!==n?n:E)===A)return;const r=this._$AH,o=e===E&&r!==E||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,i=e!==E&&(r===E||o);o&&this.element.removeEventListener(this.name,this,r),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class H{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){j(this,e)}}const L={P:"$lit$",V:s,L:l,I:1,N:O,R:M,D:p,j,H:T,O:U,F:I,B:D,W:N,Z:H},z=window.litHtmlPolyfillSupport;null==z||z(C,T),(null!==(r=globalThis.litHtmlVersions)&&void 0!==r?r:globalThis.litHtmlVersions=[]).push("2.1.1")},716:(e,t,n)=>{n.r(t),n.d(t,{customElement:()=>r,eventOptions:()=>a,property:()=>i,query:()=>d,queryAll:()=>c,queryAssignedElements:()=>f,queryAssignedNodes:()=>m,queryAsync:()=>u,state:()=>s});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const r=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){window.customElements.define(e,t)}}})(e,t),o=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function i(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):o(e,t)}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function s(e){return i({...e,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const l=({finisher:e,descriptor:t})=>(n,r)=>{var o;if(void 0===r){const r=null!==(o=n.originalKey)&&void 0!==o?o:n.key,i=null!=t?{kind:"method",placement:"prototype",key:r,descriptor:t(n.key)}:{...n,key:r};return null!=e&&(i.finisher=function(t){e(t,r)}),i}{const o=n.constructor;void 0!==t&&Object.defineProperty(n,r,t(r)),null==e||e(o,r)}};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function a(e){return l({finisher:(t,n)=>{Object.assign(t.prototype[n],e)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function d(e,t){return l({descriptor:n=>{const r={get(){var t,n;return null!==(n=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e))&&void 0!==n?n:null},enumerable:!0,configurable:!0};if(t){const t="symbol"==typeof n?Symbol():"__"+n;r.get=function(){var n,r;return void 0===this[t]&&(this[t]=null!==(r=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(e))&&void 0!==r?r:null),this[t]}}return r}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function c(e){return l({descriptor:t=>({get(){var t,n;return null!==(n=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelectorAll(e))&&void 0!==n?n:[]},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function u(e){return l({descriptor:t=>({async get(){var t;return await this.updateComplete,null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e)},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var h;const p=null!=(null===(h=window.HTMLSlotElement)||void 0===h?void 0:h.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function f(e){const{slot:t,selector:n}=null!=e?e:{};return l({descriptor:r=>({get(){var r;const o="slot"+(t?`[name=${t}]`:":not([name])"),i=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(o),s=null!=i?p(i,e):[];return n?s.filter((e=>e.matches(n))):s},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function m(e,t,n){let r,o=e;return"object"==typeof e?(o=e.slot,r=e):r={flatten:t},n?f({slot:o,flatten:t,selector:n}):l({descriptor:e=>({get(){var e,t;const n="slot"+(o?`[name=${o}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(n);return null!==(t=null==i?void 0:i.assignedNodes(r))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}},838:(e,t,n)=>{n.r(t),n.d(t,{styleMap:()=>i});var r=n(378);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const o=1;
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const i=(s=class extends class{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}{constructor(e){var t;if(super(e),e.type!==o||"style"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(e){return Object.keys(e).reduce(((t,n)=>{const r=e[n];return null==r?t:t+`${n=n.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${r};`}),"")}update(e,[t]){const{style:n}=e.element;if(void 0===this.ct){this.ct=new Set;for(const e in t)this.ct.add(e);return this.render(t)}this.ct.forEach((e=>{null==t[e]&&(this.ct.delete(e),e.includes("-")?n.removeProperty(e):n[e]="")}));for(const e in t){const r=t[e];null!=r&&(this.ct.add(e),e.includes("-")?n.setProperty(e,r):n[e]=r)}return r.Jb}},(...e)=>({_$litDirective$:s,values:e}));var s},57:(e,t,n)=>{n.r(t),n.d(t,{CSSResult:()=>s,LitElement:()=>$,ReactiveElement:()=>b,UpdatingElement:()=>x,_$LE:()=>E,_$LH:()=>_.Al,adoptStyles:()=>d,css:()=>a,defaultConverter:()=>m,getCompatibleStyle:()=>c,html:()=>_.dy,noChange:()=>_.Jb,notEqual:()=>g,nothing:()=>_.Ld,render:()=>_.sY,supportsAdoptingStyleSheets:()=>r,svg:()=>_.YP,unsafeCSS:()=>l});
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const r=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),i=new Map;class s{constructor(e,t){if(this._$cssResult$=!0,t!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){let e=i.get(this.cssText);return r&&void 0===e&&(i.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const l=e=>new s("string"==typeof e?e:e+"",o),a=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new s(n,o)},d=(e,t)=>{r?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),r=window.litNonce;void 0!==r&&n.setAttribute("nonce",r),n.textContent=t.cssText,e.appendChild(n)}))},c=r?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return l(t)})(e):e;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var u;const h=window.trustedTypes,p=h?h.emptyScript:"",f=window.reactiveElementPolyfillSupport,m={toAttribute(e,t){switch(t){case Boolean:e=e?p:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},g=(e,t)=>t!==e&&(t==t||e==e),v={attribute:!0,type:String,converter:m,reflect:!1,hasChanged:g};class b extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(e){var t;null!==(t=this.l)&&void 0!==t||(this.l=[]),this.l.push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Eh(n,t);void 0!==r&&(this._$Eu.set(r,n),e.push(r))})),e}static createProperty(e,t=v){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const o=this[e];this[t]=r,this.requestUpdate(e,o,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||v}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),this.elementProperties=new Map(e.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(c(e))}else void 0!==e&&t.push(c(e));return t}static _$Eh(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}o(){var e;this._$Ep=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(e=this.constructor.l)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$Eg)&&void 0!==t?t:this._$Eg=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$Eg)||void 0===t||t.splice(this._$Eg.indexOf(e)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Et.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return d(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$ES(e,t,n=v){var r,o;const i=this.constructor._$Eh(e,n);if(void 0!==i&&!0===n.reflect){const s=(null!==(o=null===(r=n.converter)||void 0===r?void 0:r.toAttribute)&&void 0!==o?o:m.toAttribute)(t,n.type);this._$Ei=e,null==s?this.removeAttribute(i):this.setAttribute(i,s),this._$Ei=null}}_$AK(e,t){var n,r,o;const i=this.constructor,s=i._$Eu.get(e);if(void 0!==s&&this._$Ei!==s){const e=i.getPropertyOptions(s),l=e.converter,a=null!==(o=null!==(r=null===(n=l)||void 0===n?void 0:n.fromAttribute)&&void 0!==r?r:"function"==typeof l?l:null)&&void 0!==o?o:m.fromAttribute;this._$Ei=s,this[s]=a(t,e.type),this._$Ei=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||g)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$Ei!==e&&(void 0===this._$E_&&(this._$E_=new Map),this._$E_.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$Ep=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ep}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((e,t)=>this[t]=e)),this._$Et=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$Eg)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$EU()}catch(e){throw t=!1,this._$EU(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$Eg)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(e){return!0}update(e){void 0!==this._$E_&&(this._$E_.forEach(((e,t)=>this._$ES(t,this[t],e))),this._$E_=void 0),this._$EU()}updated(e){}firstUpdated(e){}}b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:b}),(null!==(u=globalThis.reactiveElementVersions)&&void 0!==u?u:globalThis.reactiveElementVersions=[]).push("1.2.0");var y,w,_=n(378);const x=b;class $ extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Dt=(0,_.sY)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Dt)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Dt)||void 0===e||e.setConnected(!1)}render(){return _.Jb}}$.finalized=!0,$._$litElement$=!0,null===(y=globalThis.litElementHydrateSupport)||void 0===y||y.call(globalThis,{LitElement:$});const A=globalThis.litElementPolyfillSupport;null==A||A({LitElement:$});const E={_$AK:(e,t,n)=>{e._$AK(t,n)},_$AL:e=>e._$AL};(null!==(w=globalThis.litElementVersions)&&void 0!==w?w:globalThis.litElementVersions=[]).push("3.1.1")}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};n(885)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
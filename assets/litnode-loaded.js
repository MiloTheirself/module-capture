(()=>{var t={467:function(t,e,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),n=this&&this.__decorate||function(t,e,i,r){var s,n=arguments.length,o=n<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,r);else for(var l=t.length-1;l>=0;l--)(s=t[l])&&(o=(n<3?s(o):n>3?s(e,i,o):s(e,i))||o);return n>3&&o&&Object.defineProperty(e,i,o),o},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&r(e,t,i);return s(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.LitNodeLoader=void 0;const l=o(i(704)),a=i(704);let c=class extends l.LitElement{constructor(){super(...arguments),this.image=""}render(){return[a.html`
        <!---->
        <div class="host-node figure">
          <svg width="1024" height="1024" viewBox="0 0 1024 1024" class="svg-1X37T1" overflow="visible">
            <!---->
            <defs>
              <path
                id="applic-blob_mask"
                style="fill: #fff; stroke: none;"
                d="m1014.15475,358.61456c-12.78212,-93.12688 -47.47645,-178.94969 -105.909,-242.86029l0,0c-63.9106,-60.25857 -149.73341,-93.12688 -242.86029,-105.909s-153.38545,-9.13009 -153.38545,-9.13009s-60.25857,-3.65203 -153.38545,9.13009s-178.94969,47.47645 -242.86029,105.909c-60.25857,63.9106 -93.12688,149.73341 -105.909,242.86029s-9.13009,153.38545 -9.13009,153.38545s-3.65203,60.25857 9.13009,153.38545s47.47645,178.94969 105.909,242.86029l0,0c63.9106,60.25857 149.73341,93.12688 242.86029,105.909c93.12688,12.78212 153.38545,9.13009 153.38545,9.13009s60.25857,3.65203 153.38545,-9.13009c93.12688,-12.78212 178.94969,-47.47645 242.86029,-105.909l0,0c60.25857,-63.9106 93.12688,-149.73341 105.909,-242.86029c12.78212,-93.12688 9.13009,-153.38545 9.13009,-153.38545s3.65203,-60.25857 -9.13009,-153.38545"
              ></path>
            </defs>
            <mask id="applic" fill="black" x="0" y="0" width="1024" height="1024">
              <use href="#applic-blob_mask" fill="white"></use>
            </mask>
            <!---->

            <!---->
            <foreignObject mask="url(#applic)" x="0" y="0" width="1024" height="1024">
              <div>
                <img width="1024" height="1024" alt="" src="${this.image}" style="background: var(--tone-backdrop-dim);" />
              </div>
            </foreignObject>
            <!---->

            <!---->
            <path
              style="fill: none; stroke-width: calc(var(--node-border) * 2); stroke: var(--tone-border);"
              d="m1014.15475,358.61456c-12.78212,-93.12688 -47.47645,-178.94969 -105.909,-242.86029l0,0c-63.9106,-60.25857 -149.73341,-93.12688 -242.86029,-105.909s-153.38545,-9.13009 -153.38545,-9.13009s-60.25857,-3.65203 -153.38545,9.13009s-178.94969,47.47645 -242.86029,105.909c-60.25857,63.9106 -93.12688,149.73341 -105.909,242.86029s-9.13009,153.38545 -9.13009,153.38545s-3.65203,60.25857 9.13009,153.38545s47.47645,178.94969 105.909,242.86029l0,0c63.9106,60.25857 149.73341,93.12688 242.86029,105.909c93.12688,12.78212 153.38545,9.13009 153.38545,9.13009s60.25857,3.65203 153.38545,-9.13009c93.12688,-12.78212 178.94969,-47.47645 242.86029,-105.909l0,0c60.25857,-63.9106 93.12688,-149.73341 105.909,-242.86029c12.78212,-93.12688 9.13009,-153.38545 9.13009,-153.38545s3.65203,-60.25857 -9.13009,-153.38545"
            ></path>
            <!---->
          </svg>
        </div>
        <!---->
      `]}};c.styles=[a.pattern.reference("node-common").styles(),a.css`
      /**/
      :host {
        display: flex;
        flex-direction: column;
        flex: none;

        justify-content: center;
        align-items: center;
        flex: none;

        overflow: hidden;

        height: 12rem;
        width: 12rem;
      }

      .host-node.figure {
        position: relative;

        height: 100%;
        width: 100%;
      }
      .host-node.figure > * {
        position: absolute;
        inset: 0rem 0rem;

        height: 100%;
        width: 100%;
      }
    `],n([l.property({reflect:!0,attribute:"node-image",type:String})],c.prototype,"image",void 0),c=n([l.customElement("node-figure-image")],c),e.LitNodeLoader=c},694:()=>{},704:function(t,e,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),s=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.storage=e.pattern=void 0,s(i(225),e),s(i(847),e),s(i(868),e);var o=i(560);Object.defineProperty(e,"pattern",{enumerable:!0,get:function(){return n(o).default}});var l=i(49);Object.defineProperty(e,"storage",{enumerable:!0,get:function(){return n(l).default}})},490:function(t,e){"use strict";var i,r,s=this&&this.__classPrivateFieldGet||function(t,e,i,r){if("a"===i&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?r:"a"===i?r.call(t):r?r.value:e.get(t)};Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){i.set(this,{}),r.set(this,{})}once(t,e){let i=()=>{this.detach(t,i),e(...arguments)};this.on(t,i)}on(t,e){s(this,i,"f")[t]||(s(this,i,"f")[t]=[]),s(this,i,"f")[t].push(e)}detach(t,e){let r;"object"==typeof s(this,i,"f")[t]&&(r=s(this,i,"f")[t].indexOf(e),r>-1&&s(this,i,"f")[t].splice(r,1))}dispatch(t){let e,r,n,o=[].slice.call(arguments,1);if("object"==typeof s(this,i,"f")[t])for(r=s(this,i,"f")[t].slice(),n=r.length,e=0;e<n;e++)r[e].apply(this,o)}action(t){if(s(this,r,"f")[t])return s(this,r,"f")[t](...[].slice.call(arguments,1));console.warn(`Unregistert action call "${t}"`)}catch(t,e){s(this,r,"f")[t]=e}},i=new WeakMap,r=new WeakMap},278:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i={},r={};r.epoch=new Date("2020-01-01").getTime(),r.worker=0,r.process=0,r.increment=0,r.binaryString=(t,e)=>t.toString(2).padStart(e,"0"),r.binaryToID=t=>{let e="";for(;t.length>50;){const i=parseInt(t.slice(0,-32),2),r=parseInt((i%10).toString(2)+t.slice(-32),2);e=(r%10).toString()+e,t=Math.floor(i/10).toString(2)+Math.floor(r/10).toString(2).padStart(32,"0")}let i=parseInt(t,2);for(;i>0;)e=(i%10).toString()+e,i=Math.floor(i/10);return e},r.idToBinary=t=>{let e="",i=parseInt(t.slice(0,-10))||0,r=parseInt(t.slice(-10));for(;r>0||i>0;)e=String(1&r)+e,r=Math.floor(r/2),i>0&&(r+=i%2*5e9,i=Math.floor(i/2));return e},i.create=(t,e)=>{t=null!=t?t:Date.now(),e=null!=e?e:r.increment++,r.increment>=4095&&(r.increment=0);let i="";return i+=`${r.binaryString(t-r.epoch,42)}`,i+=`${r.binaryString(r.process,5)}`,i+=`${r.binaryString(r.worker,5)}`,i+=`${r.binaryString(e,12)}`,r.binaryToID(i)},i.read=t=>{const e=r.idToBinary(t).toString(2).padStart(64,"0");return{epoch:r.epoch,timestamp:parseInt(e.substring(0,42),2)+r.epoch,worker:parseInt(e.substring(42,47),2),process:parseInt(e.substring(47,52),2),increment:parseInt(e.substring(52,64),2),binary:e}},e.default=Object.assign({},i)},560:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=i(225),n=r(i(49)),o={},l={},a=globalThis.nodeExternal;"node-pattern"in a?l.reference=a["node-pattern"]:(l.reference=n.default.create(),a["node-pattern"]=a["node-pattern"]||{collection:l.reference.collection.bind(l.reference),doc:l.reference.doc.bind(l.reference)}),o.reference=t=>{const e=l.reference.doc("node.pattern").get({sync:!0});return t in e?e[t]:(()=>{const e={};return e[t]={render:(e,i)=>s.html` <!-- err; pattern '${t}' not defind --> `,styles:(e,i)=>s.css`
              /* err; pattern '${(0,s.unsafeCSS)(t)}' not defind */
            `,create:({render:i,styles:r})=>{const s=l.reference.doc("node.pattern").get({sync:!0});s[t]={},s[t].styles=null!=r?r:e[t].create,s[t].render=null!=i?i:e[t].create,s[t].create=e[t].create,l.reference.doc("node.pattern").set(s,{merge:!0})}},l.reference.doc("node.pattern").set(e,{merge:!0}),e[t]})()},e.default=Object.assign({},o)},49:function(t,e,i){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=r(i(447)),n={};globalThis.nodeExternal;n.create=()=>new s.default,e.default=Object.assign({},n)},761:function(t,e,i){"use strict";var r,s=this&&this.__classPrivateFieldSet||function(t,e,i,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(t,i):s?s.value=i:e.set(t,i),i},n=this&&this.__classPrivateFieldGet||function(t,e,i,r){if("a"===i&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?r:"a"===i?r.call(t):r?r.value:e.get(t)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=o(i(278));e.default=class{constructor(t){r.set(this,void 0),s(this,r,t||{},"f"),this.nonce=l.default.create()}doc(t){return n(this,r,"f").doc(t,this.nonce)}},r=new WeakMap},593:function(t,e,i){"use strict";var r,s,n=this&&this.__classPrivateFieldSet||function(t,e,i,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(t,i):s?s.value=i:e.set(t,i),i},o=this&&this.__classPrivateFieldGet||function(t,e,i,r){if("a"===i&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?r:"a"===i?r.call(t):r?r.value:e.get(t)},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=l(i(490)),c={assign:(...t)=>{let e={},i=t=>{for(let i in t){if(!t.hasOwnProperty(i))return;"[object Object]"===Object.prototype.toString.call(t[i])?e[i]=c.assign(e[i],t[i]):e[i]=t[i]}};for(let e=0;e<t.length;e++)i(t[e]);return e},equals:(t,e)=>{const i=t=>{let e=Object.keys(t);e.sort();let i={};for(let r=0;r<e.length;r++){let s=e[r],n=t[s];i[s]=n}return i};return JSON.stringify(i(t))==JSON.stringify(i(e))}};e.default=class{constructor(){r.set(this,void 0),s.set(this,void 0),n(this,r,new a.default,"f"),n(this,s,{},"f")}onSnapshot(t,e){o(this,r,"f").on("changed",(()=>{t(this.get(e))}))}get(t){return(t=t||{}).sync?Object.assign({},o(this,s,"f")):new Promise((t=>{t({exists:!!Object.keys(o(this,s,"f")).length,data:()=>Object.assign({},o(this,s,"f"))})}))}set(t,e){const i=(e=e||{}).merge?Object.assign({},o(this,s,"f")):{},l=c.assign(i,t),a=!c.equals(i,l);return n(this,s,l,"f"),o(this,r,"f").dispatch("changed"),a}},r=new WeakMap,s=new WeakMap},447:function(t,e,i){"use strict";var r,s,n=this&&this.__classPrivateFieldSet||function(t,e,i,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(t,i):s?s.value=i:e.set(t,i),i},o=this&&this.__classPrivateFieldGet||function(t,e,i,r){if("a"===i&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?r:"a"===i?r.call(t):r?r.value:e.get(t)},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=l(i(278)),c=l(i(490)),h=l(i(761)),d=l(i(593));class u extends c.default{constructor(){super(),r.set(this,{}),s.set(this,{}),n(this,r,{},"f"),n(this,s,{},"f"),this.nonce=a.default.create()}collection(t,e){return e||(e=this.nonce),o(this,r,"f")[t]?o(this,r,"f")[t]:o(this,r,"f")[t]?void 0:(o(this,r,"f")[t]=new h.default(this),o(this,r,"f")[t])}doc(t,e){if(e||(e=this.nonce),-1!=t.indexOf("/")){let e;return t.split("/").forEach(((t,i)=>{e=i%2==0?this.collection(t):this.doc(t)})),e}return o(this,s,"f")[t]?o(this,s,"f")[t]:o(this,s,"f")[t]?void 0:(o(this,s,"f")[t]=new d.default,o(this,s,"f")[t])}}e.default=u,r=new WeakMap,s=new WeakMap},526:(t,e,i)=>{"use strict";
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var r;i.d(e,{Al:()=>I,dy:()=>w,Jb:()=>S,Ld:()=>E,sY:()=>O,YP:()=>A});const s=globalThis.trustedTypes,n=s?s.createPolicy("lit-html",{createHTML:t=>t}):void 0,o=`lit$${(Math.random()+"").slice(9)}$`,l="?"+o,a=`<${l}>`,c=document,h=(t="")=>c.createComment(t),d=t=>null===t||"object"!=typeof t&&"function"!=typeof t,u=Array.isArray,p=t=>{var e;return u(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},f=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,_=/>/g,y=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,g=/'/g,m=/"/g,$=/^(?:script|style|textarea)$/i,b=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),w=b(1),A=b(2),S=Symbol.for("lit-noChange"),E=Symbol.for("lit-nothing"),P=new WeakMap,O=(t,e,i)=>{var r,s;const n=null!==(r=null==i?void 0:i.renderBefore)&&void 0!==r?r:e;let o=n._$litPart$;if(void 0===o){const t=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:null;n._$litPart$=o=new k(e.insertBefore(h(),t),t,void 0,null!=i?i:{})}return o._$AI(t),o},C=c.createTreeWalker(c,129,null,!1),T=(t,e)=>{const i=t.length-1,r=[];let s,l=2===e?"<svg>":"",c=f;for(let e=0;e<i;e++){const i=t[e];let n,h,d=-1,u=0;for(;u<i.length&&(c.lastIndex=u,h=c.exec(i),null!==h);)u=c.lastIndex,c===f?"!--"===h[1]?c=v:void 0!==h[1]?c=_:void 0!==h[2]?($.test(h[2])&&(s=RegExp("</"+h[2],"g")),c=y):void 0!==h[3]&&(c=y):c===y?">"===h[0]?(c=null!=s?s:f,d=-1):void 0===h[1]?d=-2:(d=c.lastIndex-h[2].length,n=h[1],c=void 0===h[3]?y:'"'===h[3]?m:g):c===m||c===g?c=y:c===v||c===_?c=f:(c=y,s=void 0);const p=c===y&&t[e+1].startsWith("/>")?" ":"";l+=c===f?i+a:d>=0?(r.push(n),i.slice(0,d)+"$lit$"+i.slice(d)+o+p):i+o+(-2===d?(r.push(void 0),e):p)}const h=l+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==n?n.createHTML(h):h,r]};class M{constructor({strings:t,_$litType$:e},i){let r;this.parts=[];let n=0,a=0;const c=t.length-1,d=this.parts,[u,p]=T(t,e);if(this.el=M.createElement(u,i),C.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(r=C.nextNode())&&d.length<c;){if(1===r.nodeType){if(r.hasAttributes()){const t=[];for(const e of r.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(o)){const i=p[a++];if(t.push(e),void 0!==i){const t=r.getAttribute(i.toLowerCase()+"$lit$").split(o),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?N:"?"===e[1]?R:"@"===e[1]?L:U})}else d.push({type:6,index:n})}for(const e of t)r.removeAttribute(e)}if($.test(r.tagName)){const t=r.textContent.split(o),e=t.length-1;if(e>0){r.textContent=s?s.emptyScript:"";for(let i=0;i<e;i++)r.append(t[i],h()),C.nextNode(),d.push({type:2,index:++n});r.append(t[e],h())}}}else if(8===r.nodeType)if(r.data===l)d.push({type:2,index:n});else{let t=-1;for(;-1!==(t=r.data.indexOf(o,t+1));)d.push({type:7,index:n}),t+=o.length-1}n++}}static createElement(t,e){const i=c.createElement("template");return i.innerHTML=t,i}}function x(t,e,i=t,r){var s,n,o,l;if(e===S)return e;let a=void 0!==r?null===(s=i._$Cl)||void 0===s?void 0:s[r]:i._$Cu;const c=d(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==c&&(null===(n=null==a?void 0:a._$AO)||void 0===n||n.call(a,!1),void 0===c?a=void 0:(a=new c(t),a._$AT(t,i,r)),void 0!==r?(null!==(o=(l=i)._$Cl)&&void 0!==o?o:l._$Cl=[])[r]=a:i._$Cu=a),void 0!==a&&(e=x(t,a._$AS(t,e.values),a,r)),e}class j{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:r}=this._$AD,s=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:c).importNode(i,!0);C.currentNode=s;let n=C.nextNode(),o=0,l=0,a=r[0];for(;void 0!==a;){if(o===a.index){let e;2===a.type?e=new k(n,n.nextSibling,this,t):1===a.type?e=new a.ctor(n,a.name,a.strings,this,t):6===a.type&&(e=new D(n,this,t)),this.v.push(e),a=r[++l]}o!==(null==a?void 0:a.index)&&(n=C.nextNode(),o++)}return s}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class k{constructor(t,e,i,r){var s;this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=r,this._$Cg=null===(s=null==r?void 0:r.isConnected)||void 0===s||s}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=x(this,t,e),d(t)?t===E||null==t||""===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==S&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.S(t):p(t)?this.A(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}S(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==E&&d(this._$AH)?this._$AA.nextSibling.data=t:this.S(c.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:r}=t,s="number"==typeof r?this._$AC(t):(void 0===r.el&&(r.el=M.createElement(r.h,this.options)),r);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===s)this._$AH.m(i);else{const t=new j(s,this),e=t.p(this.options);t.m(i),this.S(e),this._$AH=t}}_$AC(t){let e=P.get(t.strings);return void 0===e&&P.set(t.strings,e=new M(t)),e}A(t){u(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,r=0;for(const s of t)r===e.length?e.push(i=new k(this.M(h()),this.M(h()),this,this.options)):i=e[r],i._$AI(s),r++;r<e.length&&(this._$AR(i&&i._$AB.nextSibling,r),e.length=r)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class U{constructor(t,e,i,r,s){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=e,this._$AM=r,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=E}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,r){const s=this.strings;let n=!1;if(void 0===s)t=x(this,t,e,0),n=!d(t)||t!==this._$AH&&t!==S,n&&(this._$AH=t);else{const r=t;let o,l;for(t=s[0],o=0;o<s.length-1;o++)l=x(this,r[i+o],e,o),l===S&&(l=this._$AH[o]),n||(n=!d(l)||l!==this._$AH[o]),l===E?t=E:t!==E&&(t+=(null!=l?l:"")+s[o+1]),this._$AH[o]=l}n&&!r&&this.k(t)}k(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class N extends U{constructor(){super(...arguments),this.type=3}k(t){this.element[this.name]=t===E?void 0:t}}const H=s?s.emptyScript:"";class R extends U{constructor(){super(...arguments),this.type=4}k(t){t&&t!==E?this.element.setAttribute(this.name,H):this.element.removeAttribute(this.name)}}class L extends U{constructor(t,e,i,r,s){super(t,e,i,r,s),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=x(this,t,e,0))&&void 0!==i?i:E)===S)return;const r=this._$AH,s=t===E&&r!==E||t.capture!==r.capture||t.once!==r.once||t.passive!==r.passive,n=t!==E&&(r===E||s);s&&this.element.removeEventListener(this.name,this,r),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class D{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){x(this,t)}}const I={P:"$lit$",V:o,L:l,I:1,N:T,R:j,D:p,j:x,H:k,O:U,F:R,B:L,W:N,Z:D},B=window.litHtmlPolyfillSupport;null==B||B(M,k),(null!==(r=globalThis.litHtmlVersions)&&void 0!==r?r:globalThis.litHtmlVersions=[]).push("2.1.1")},847:(t,e,i)=>{"use strict";i.r(e),i.d(e,{customElement:()=>r,eventOptions:()=>a,property:()=>n,query:()=>c,queryAll:()=>h,queryAssignedElements:()=>f,queryAssignedNodes:()=>v,queryAsync:()=>d,state:()=>o});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const r=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:r}=e;return{kind:i,elements:r,finisher(e){window.customElements.define(t,e)}}})(t,e),s=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function n(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):s(t,e)}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function o(t){return n({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const l=({finisher:t,descriptor:e})=>(i,r)=>{var s;if(void 0===r){const r=null!==(s=i.originalKey)&&void 0!==s?s:i.key,n=null!=e?{kind:"method",placement:"prototype",key:r,descriptor:e(i.key)}:{...i,key:r};return null!=t&&(n.finisher=function(e){t(e,r)}),n}{const s=i.constructor;void 0!==e&&Object.defineProperty(i,r,e(r)),null==t||t(s,r)}};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function a(t){return l({finisher:(e,i)=>{Object.assign(e.prototype[i],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function c(t,e){return l({descriptor:i=>{const r={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;r.get=function(){var i,r;return void 0===this[e]&&(this[e]=null!==(r=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==r?r:null),this[e]}}return r}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function h(t){return l({descriptor:e=>({get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelectorAll(t))&&void 0!==i?i:[]},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function d(t){return l({descriptor:e=>({async get(){var e;return await this.updateComplete,null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t)},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var u;const p=null!=(null===(u=window.HTMLSlotElement)||void 0===u?void 0:u.prototype.assignedElements)?(t,e)=>t.assignedElements(e):(t,e)=>t.assignedNodes(e).filter((t=>t.nodeType===Node.ELEMENT_NODE));function f(t){const{slot:e,selector:i}=null!=t?t:{};return l({descriptor:r=>({get(){var r;const s="slot"+(e?`[name=${e}]`:":not([name])"),n=null===(r=this.renderRoot)||void 0===r?void 0:r.querySelector(s),o=null!=n?p(n,t):[];return i?o.filter((t=>t.matches(i))):o},enumerable:!0,configurable:!0})})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function v(t,e,i){let r,s=t;return"object"==typeof t?(s=t.slot,r=t):r={flatten:e},i?f({slot:s,flatten:e,selector:i}):l({descriptor:t=>({get(){var t,e;const i="slot"+(s?`[name=${s}]`:":not([name])"),n=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(i);return null!==(e=null==n?void 0:n.assignedNodes(r))&&void 0!==e?e:[]},enumerable:!0,configurable:!0})})}},868:(t,e,i)=>{"use strict";i.r(e),i.d(e,{styleMap:()=>n});var r=i(526);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const s=1;
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const n=(o=class extends class{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}{constructor(t){var e;if(super(t),t.type!==s||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,i)=>{const r=t[i];return null==r?e:e+`${i=i.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${r};`}),"")}update(t,[e]){const{style:i}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?i.removeProperty(t):i[t]="")}));for(const t in e){const r=e[t];null!=r&&(this.ct.add(t),t.includes("-")?i.setProperty(t,r):i[t]=r)}return r.Jb}},(...t)=>({_$litDirective$:o,values:t}));var o},225:(t,e,i)=>{"use strict";i.r(e),i.d(e,{CSSResult:()=>o,LitElement:()=>A,ReactiveElement:()=>g,UpdatingElement:()=>w,_$LE:()=>E,_$LH:()=>b.Al,adoptStyles:()=>c,css:()=>a,defaultConverter:()=>v,getCompatibleStyle:()=>h,html:()=>b.dy,noChange:()=>b.Jb,notEqual:()=>_,nothing:()=>b.Ld,render:()=>b.sY,supportsAdoptingStyleSheets:()=>r,svg:()=>b.YP,unsafeCSS:()=>l});
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const r=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s=Symbol(),n=new Map;class o{constructor(t,e){if(this._$cssResult$=!0,e!==s)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){let t=n.get(this.cssText);return r&&void 0===t&&(n.set(this.cssText,t=new CSSStyleSheet),t.replaceSync(this.cssText)),t}toString(){return this.cssText}}const l=t=>new o("string"==typeof t?t:t+"",s),a=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,r)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[r+1]),t[0]);return new o(i,s)},c=(t,e)=>{r?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),r=window.litNonce;void 0!==r&&i.setAttribute("nonce",r),i.textContent=e.cssText,t.appendChild(i)}))},h=r?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return l(e)})(t):t;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var d;const u=window.trustedTypes,p=u?u.emptyScript:"",f=window.reactiveElementPolyfillSupport,v={toAttribute(t,e){switch(e){case Boolean:t=t?p:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},_=(t,e)=>e!==t&&(e==e||t==t),y={attribute:!0,type:String,converter:v,reflect:!1,hasChanged:_};class g extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(t){var e;null!==(e=this.l)&&void 0!==e||(this.l=[]),this.l.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const r=this._$Eh(i,e);void 0!==r&&(this._$Eu.set(r,i),t.push(r))})),t}static createProperty(t,e=y){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,r=this.getPropertyDescriptor(t,i,e);void 0!==r&&Object.defineProperty(this.prototype,t,r)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(r){const s=this[t];this[e]=r,this.requestUpdate(t,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||y}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(h(t))}else void 0!==t&&e.push(h(t));return e}static _$Eh(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$Eg)&&void 0!==e?e:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$Eg)||void 0===e||e.splice(this._$Eg.indexOf(t)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Et.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return c(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ES(t,e,i=y){var r,s;const n=this.constructor._$Eh(t,i);if(void 0!==n&&!0===i.reflect){const o=(null!==(s=null===(r=i.converter)||void 0===r?void 0:r.toAttribute)&&void 0!==s?s:v.toAttribute)(e,i.type);this._$Ei=t,null==o?this.removeAttribute(n):this.setAttribute(n,o),this._$Ei=null}}_$AK(t,e){var i,r,s;const n=this.constructor,o=n._$Eu.get(t);if(void 0!==o&&this._$Ei!==o){const t=n.getPropertyOptions(o),l=t.converter,a=null!==(s=null!==(r=null===(i=l)||void 0===i?void 0:i.fromAttribute)&&void 0!==r?r:"function"==typeof l?l:null)&&void 0!==s?s:v.fromAttribute;this._$Ei=o,this[o]=a(e,t.type),this._$Ei=null}}requestUpdate(t,e,i){let r=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||_)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$Ei!==t&&(void 0===this._$E_&&(this._$E_=new Map),this._$E_.set(t,i))):r=!1),!this.isUpdatePending&&r&&(this._$Ep=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ep}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,e)=>this[e]=t)),this._$Et=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$Eg)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return!0}update(t){void 0!==this._$E_&&(this._$E_.forEach(((t,e)=>this._$ES(e,this[e],t))),this._$E_=void 0),this._$EU()}updated(t){}firstUpdated(t){}}g.finalized=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:g}),(null!==(d=globalThis.reactiveElementVersions)&&void 0!==d?d:globalThis.reactiveElementVersions=[]).push("1.2.0");var m,$,b=i(526);const w=g;class A extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=(0,b.sY)(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1)}render(){return b.Jb}}A.finalized=!0,A._$litElement$=!0,null===(m=globalThis.litElementHydrateSupport)||void 0===m||m.call(globalThis,{LitElement:A});const S=globalThis.litElementPolyfillSupport;null==S||S({LitElement:A});const E={_$AK:(t,e,i)=>{t._$AK(e,i)},_$AL:t=>t._$AL};(null!==($=globalThis.litElementVersions)&&void 0!==$?$:globalThis.litElementVersions=[]).push("3.1.1")}},e={};function i(r){var s=e[r];if(void 0!==s)return s.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,i),n.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};(()=>{"use strict";i(694),i(467)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,